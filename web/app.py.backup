# -*- coding: utf-8 -*-
"""
FastHTML Web管理面板
核心应用文件，提供布局、认证、UI组件和根路由（仪表板）。
"""

import logging
import os
import time
import hashlib
import asyncio
from typing import Optional, Dict, Any, List, Callable, Union
from datetime import datetime

from fasthtml.common import *
import secrets
import os
import time
from starlette.middleware.sessions import SessionMiddleware
from starlette.responses import RedirectResponse, HTMLResponse
from starlette.exceptions import HTTPException as StarletteHTTPException
from starlette.staticfiles import StaticFiles
from starlette.requests import Request

# 导入数据库管理器
from database.db_merchants import merchant_manager
from database.db_regions import region_manager
from database.db_users import user_manager
from database.db_incentives import incentive_manager
from database.db_reviews import review_manager
from database.db_binding_codes import binding_codes_manager
from database.db_media import media_db
from database.db_orders import OrderManager
from utils.enums import MERCHANT_STATUS, ORDER_STATUS
from web.posts_routes_v2 import (
    POST_STATUS_DISPLAY_MAP, POST_STATUS_ACTIONS,
    get_posts_status_color, get_posts_next_status_options,
    generate_posts_quick_action_buttons
)
from web.orders_routes_v2 import (
    ORDER_STATUS_DISPLAY_MAP, ORDER_STATUS_COLORS, ORDER_STATUS_ICONS,
    get_order_status_color, get_order_status_icon,
    get_order_next_status_options, generate_order_action_buttons,
    generate_order_batch_operations, generate_order_statistics_panel
)
from database.db_system_config import system_config_manager

# 导入布局和认证组件
from web.layout import create_layout, require_auth, okx_button, okx_input, okx_textarea, okx_select, okx_form_group

# 导入项目配置
from config import WEB_CONFIG

logger = logging.getLogger(__name__)

# --- UI & App Setup ---

daisyui_css = Link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/daisyui@4.12.10/dist/full.min.css")
tailwind_css = Script(src="https://cdn.tailwindcss.com")
okx_theme_css = Link(rel="stylesheet", href="/static/css/okx-theme.css")

app = FastHTML(hdrs=[daisyui_css, tailwind_css, okx_theme_css, Meta(name="viewport", content="width=device-width, initial-scale=1.0")])

app.mount("/static", StaticFiles(directory="static"), name="static")

# 注册订阅验证路由
@app.get("/subscription")
@require_auth
async def subscription_page(request: Request):
    """订阅验证管理页面"""
    try:
        # 获取当前配置
        config = await system_config_manager.get_config(
            'subscription_verification_config',
            {"enabled": False, "required_subscriptions": []}
        )
        
        # 获取统计数据
        stats = {
            'daily_verifications': 0,
            'daily_failures': 0,  
            'pass_rate': 100.0,
            'weekly_verifications': 0
        }
        
        # 状态指示器
        status_text = "已启用" if config.get('enabled', False) else "已禁用"
        status_color = "text-success" if config.get('enabled', False) else "text-error"
        status_icon = "🟢" if config.get('enabled', False) else "🔴"
        
        status_indicator = Div(
            Div(
                Span(status_icon, cls="text-2xl"),
                Div(
                    H3("订阅验证状态", cls="text-lg font-semibold"),
                    P(status_text, cls=f"text-sm {status_color}")
                ), cls="ml-3"
            ), cls="flex items-center"
        ), cls="bg-white p-6 rounded-lg shadow mb-6"
        
        # 统计卡片
        stats_cards = Div(
            Div(Div(Span("📺", cls="text-3xl"), Div(P("配置频道", cls="text-sm text-gray-500"), P(str(len(config.get('required_subscriptions', []))), cls="text-2xl font-bold text-primary")), cls="flex items-center gap-3"), cls="stat-card"),
            Div(Div(Span("🔍", cls="text-3xl"), Div(P("今日验证", cls="text-sm text-gray-500"), P(str(stats['daily_verifications']), cls="text-2xl font-bold text-info")), cls="flex items-center gap-3"), cls="stat-card"),
            Div(Div(Span("✅", cls="text-3xl"), Div(P("通过率", cls="text-sm text-gray-500"), P(f"{stats['pass_rate']:.1f}%", cls="text-2xl font-bold text-success")), cls="flex items-center gap-3"), cls="stat-card"),
            Div(Div(Span("❌", cls="text-3xl"), Div(P("今日失败", cls="text-sm text-gray-500"), P(str(stats['daily_failures']), cls="text-2xl font-bold text-warning")), cls="flex items-center gap-3"), cls="stat-card"),
            cls="stats-container"
        )
        
        # 工具栏
        toggle_button_text = "🔴 禁用验证" if config.get('enabled', False) else "🟢 启用验证"
        toggle_button_class = "btn btn-warning btn-sm" if config.get('enabled', False) else "btn btn-success btn-sm"
        
        toolbar = Div(
            Div(
                H3("系统控制", cls="content-section-title"),
                P("频道订阅验证系统的开关和管理", cls="text-sm text-gray-500")
            ),
            Div(
                Form(
                    Button(toggle_button_text, type="submit", cls=toggle_button_class),
                    method="post", action="/subscription/toggle", cls="inline-block mr-3"
                ),
                cls="action-buttons"
            ),
            cls="toolbar-container"
        )
        
        # 频道配置区域
        channels = config.get('required_subscriptions', [])
        if channels:
            channels_list = Div(
                *[Div(
                    Div(
                        H4(channel.get('display_name', '未命名频道'), cls="font-semibold"),
                        P(f"ID: {channel.get('chat_id', 'N/A')}", cls="text-sm text-gray-600"),
                        P(f"链接: {channel.get('join_link', 'N/A')}", cls="text-sm text-gray-600")
                    ),
                    A("删除", href=f"/subscription/channel/{i}/delete", cls="btn btn-error btn-sm"),
                    cls="flex justify-between items-center p-4 border rounded-lg"
                ) for i, channel in enumerate(channels)]
            )
        else:
            channels_list = Div(
                P("暂无配置频道", cls="text-gray-500 text-center py-8"),
                cls=""
            )
            
        channels_table = Div(
            Div(
                H3("📺 频道配置", cls="content-section-title"),
                Div(channels_list, cls="data-table-container")
            )
        )
        
        # 添加频道表单
        add_channel_form = Form(
            Div(
                H3("➕ 添加频道", cls="text-lg font-semibold mb-4"),
                Div(
                    Label("频道名称", cls="label label-text"),
                    Input(name="display_name", placeholder="如：官方频道", cls="input input-bordered w-full"),
                    cls="form-control w-full mb-4"
                ),
                Div(
                    Label("频道ID", cls="label label-text"),
                    Input(name="chat_id", placeholder="@channel 或 -1001234567890", cls="input input-bordered w-full"),
                    cls="form-control w-full mb-4"
                ),
                Div(
                    Label("加入链接", cls="label label-text"),
                    Input(name="join_link", placeholder="https://t.me/channel", cls="input input-bordered w-full"),
                    cls="form-control w-full mb-4"
                ),
                Button("添加频道", type="submit", cls="btn btn-primary w-full"),
                cls="space-y-4"
            ),
            method="post", action="/subscription/channel/add", cls="card bg-base-100 shadow-lg p-6"
        )
        
        content = Div(
            Div(H1("频道订阅验证管理", cls="page-title"), cls="page-header"),
            status_indicator,
            stats_cards, 
            toolbar,
            Div(
                Div(channels_table, cls="lg:col-span-2"),
                Div(add_channel_form, cls="space-y-6"),
                cls="content-grid grid-3"
            )
        )
        
        return create_layout("频道订阅验证管理", content)
        
    except Exception as e:
        logger.error(f"订阅验证页面加载失败: {e}")
        error_content = Div(
            H1("页面加载失败", cls="text-2xl font-bold text-red-600 mb-4"),
            P(f"错误信息: {str(e)}", cls="text-red-500")
        )
        return create_layout("错误", error_content)

app.add_middleware(SessionMiddleware, secret_key=WEB_CONFIG.get("secret_key", "your-secret-key-here"), max_age=86400)

# --- 简易缓存（首页仪表板） ---
DASHBOARD_CACHE_TTL = int(os.getenv("DASHBOARD_CACHE_TTL", "5"))  # 秒
_dashboard_cache_ts: float = 0.0
_dashboard_cache_payload: Dict[str, Any] = {}

# --- 异常处理 ---

@app.exception_handler(StarletteHTTPException)
async def http_exception_handler(request: Request, exc: StarletteHTTPException):
    """处理HTTP异常"""
    if exc.status_code == 404:
        content = create_layout(
            "页面未找到",
            Div(
                H2("页面未找到", cls="text-2xl font-bold mb-4"),
                P("您访问的页面不存在。"),
                A("返回首页", href="/", cls="btn btn-primary mt-4")
            )
        )
        return HTMLResponse(str(content), status_code=404)
    
    content = create_layout(
        "服务器错误",
        Div(
            H2("服务器错误", cls="text-2xl font-bold mb-4"),
            P(f"发生了错误: {exc.detail}"),
            A("返回首页", href="/", cls="btn btn-primary mt-4")
        )
    )
    return HTMLResponse(str(content), status_code=exc.status_code)

# --- 认证、CSRF 与工具（回置到本文件，避免依赖） ---

class AuthManager:
    """Web后台认证管理器"""

    @staticmethod
    def hash_password(password: str) -> str:
        return hashlib.sha256(password.encode()).hexdigest()

    @staticmethod
    def verify_password(password: str, hashed: str) -> bool:
        return hashlib.sha256(password.encode()).hexdigest() == hashed

    @staticmethod
    def is_admin_session(request: Request) -> bool:
        return request.session.get('is_admin', False)

    @staticmethod
    def login_admin(request: Request, admin_id: int) -> bool:
        from config import ADMIN_IDS
        if admin_id in ADMIN_IDS:
            request.session['is_admin'] = True
            request.session['admin_id'] = admin_id
            return True
        return False

    @staticmethod
    def logout(request: Request) -> None:
        request.session.clear()


def require_auth(func: Callable) -> Callable:
    import functools
    @functools.wraps(func)
    async def wrapper(*args: Any, **kwargs: Any) -> Union[RedirectResponse, Any]:
        request = args[0] if args else kwargs.get('request')
        if not request or not AuthManager.is_admin_session(request):
            return RedirectResponse(url="/login", status_code=302)
        if asyncio.iscoroutinefunction(func):
            return await func(*args, **kwargs)
        else:
            return func(*args, **kwargs)
    return wrapper


def get_or_create_csrf_token(request: Request) -> str:
    token = request.session.get("csrf_token")
    if not token:
        token = secrets.token_urlsafe(32)
        request.session["csrf_token"] = token
    return token


def validate_csrf(request: Request, token: str) -> bool:
    expected = request.session.get("csrf_token")
    return bool(expected and token and secrets.compare_digest(str(token), str(expected)))


def _okx_css_version() -> str:
    try:
        path = os.path.join("static", "css", "okx-theme.css")
        mtime = os.path.getmtime(path)
        return str(int(mtime))
    except Exception:
        return str(int(time.time()))

# 订阅统计：使用服务层，避免跨模块环


def create_layout(title: str, content, show_nav: bool = True):
    """创建页面布局 - 统一布局标准"""
    # 菜单项定义（避免重复）
    menu_items = [
        ("仪表板", "/", "/"),
        ("商户管理", "/merchants", "/merchants"),
        ("帖子管理", "/posts", "/posts"),
        ("订单管理", "/orders", "/orders"),
        ("评价管理", "/reviews", "/reviews"),
        ("订阅验证", "/subscription", "/subscription"),
        ("绑定码", "/binding-codes", "/binding-codes"),
        ("地区管理", "/regions", "/regions"),
        ("激励系统", "/incentives", "/incentives"),
    ]
    
    # 用户中心子菜单
    user_submenu = [
        ("用户列表", "/users", "/users"),
        ("用户分析", "/users/analytics", "/users/analytics"),
    ]
    
    # 创建菜单项的函数
    def create_menu_items(for_mobile=False):
        items = []
        for name, href, data_href in menu_items:
            items.append(Li(A(name, href=href, **{"data-href": data_href})))
        
        # 添加用户中心下拉菜单
        user_menu = Details(
            Summary("用户中心"),
            Ul(
                *[Li(A(name, href=href, **{"data-href": data_href})) for name, href, data_href in user_submenu]
            )
        )
        items.insert(4, Li(user_menu))  # 在订单管理后插入
        return items
    
    nav = Nav(
        Div(
            # 左侧：移动端菜单
            Div(
                # 移动端下拉菜单
                Div(
                    Label(
                        Span("☰", cls="text-xl"),
                        tabindex="0",
                        cls="btn btn-ghost lg:hidden"
                    ),
                    Ul(
                        *create_menu_items(for_mobile=True),
                        cls="menu menu-sm dropdown-content mt-3 z-[1] p-2 shadow bg-base-100 rounded-box w-56"
                    ),
                    cls="dropdown"
                ),
                cls="navbar-start"
            ),

            # 中间：桌面菜单
            Div(
                Ul(
                    *create_menu_items(),
                    cls="menu menu-horizontal px-1 hidden lg:flex"
                ),
                id="main-nav",
                cls="navbar-center"
            ),

            # 右侧：操作
            Div(
                A("退出", href="/logout", cls="btn btn-sm btn-outline"),
                cls="navbar-end"
            ),
            # 使用与页面内容相同的容器样式
            style="max-width: 1200px; margin: 0 auto; padding: 0 1.5rem;"
        ),
        cls="navbar bg-base-100 shadow sticky top-0 z-50"
    ) if show_nav else ""
    
    return Html(
        Head(
            Title(title),
            Meta(charset="utf-8"),
            Meta(name="viewport", content="width=device-width, initial-scale=1.0"),
            # 添加CSS样式链接
            Link(rel="preconnect", href="https://cdn.jsdelivr.net"),
            Link(rel="dns-prefetch", href="https://cdn.jsdelivr.net"),
            Link(rel="stylesheet", href="https://cdn.jsdelivr.net/npm/daisyui@4.12.10/dist/full.min.css"),
            Script(src="https://cdn.tailwindcss.com"),
            Link(rel="stylesheet", href=f"/static/css/okx-theme.css?v={_okx_css_version()}"),
        ),
        Body(
            nav,
            # 使用统一的页面容器类
            Div(
                content,
                cls="page-container"
            ),
            # 激活当前导航项的小脚本（基于 data-href 前缀匹配）
            Script(
                """
                document.addEventListener('DOMContentLoaded', function(){
                  var path = location.pathname;
                  document.querySelectorAll('#main-nav a[data-href]').forEach(function(a){
                    var href = a.getAttribute('data-href');
                    var isActive = (href === '/' && path === '/') || (href !== '/' && path.startsWith(href));
                    if (isActive) {
                      a.classList.add('active','btn-active');
                    }
                  });
                });
                """
            ),
            # 简易样式检测指示器（仅前端检测，不影响功能）
            Script(
                """
                document.addEventListener('DOMContentLoaded', function(){
                  try {
                    var bg = getComputedStyle(document.body).backgroundColor;
                    var fg = getComputedStyle(document.body).color;
                    var ok = (bg === 'rgb(0, 0, 0)' && fg === 'rgb(255, 255, 255)');
                    var el = document.createElement('div');
                    el.textContent = ok ? 'OKX CSS ✓' : 'CSS 未生效';
                    el.setAttribute('title', '点击隐藏');
                    el.style.cssText = 'position:fixed;right:10px;bottom:10px;z-index:9999;padding:6px 10px;border-radius:8px;font-size:12px;cursor:pointer;opacity:0.9;'+
                                      (ok ? 'background:#10b981;color:#000' : 'background:#ef4444;color:#fff');
                    el.onclick = function(){ this.remove(); };
                    document.body.appendChild(el);
                  } catch (e) { /* 忽略 */ }
                });
                """
            ),
            cls="min-h-screen bg-gray-50"
        )
    )

# --- 订阅统计占位（避免循环导入，仅用于页面渲染；如需真实数据请替换实现） ---

async def _subscription_stats_impl() -> Dict[str, Any]:
    try:
        return {
            'daily_verifications': 0,
            'daily_failures': 0,
            'pass_rate': 100.0,
            'weekly_verifications': 0,
        }
    except Exception:
        return {
            'daily_verifications': 0,
            'daily_failures': 0,
            'pass_rate': 0.0,
            'weekly_verifications': 0,
        }

# --- 调试路由：样式检查 ---

@app.get("/debug/style-check")
@require_auth
def style_check(_: Request):
    """检查自定义样式是否生效的简单页面"""
    content = Div(
        H1("样式自检", cls="text-2xl font-bold mb-4"),
        P("用于验证 /static/css/okx-theme.css 是否被浏览器应用。", cls="text-sm text-gray-400 mb-4"),

        Div(
            Div(
                Span("检测结果: ", cls="font-semibold"),
                Span("检测中...", id="okx-result", cls="badge"),
            ),
            Div(
                P([Span("Body 背景色: ", cls="text-gray-400"), Code("N/A", id="okx-bg")]),
                P([Span("Body 文字色: ", cls="text-gray-400"), Code("N/A", id="okx-fg")]),
                P([Span("按钮示例: ", cls="text-gray-400"), Button("主要按钮", cls="btn btn-primary btn-sm ml-2"), Button("幽灵按钮", cls="btn btn-ghost btn-sm ml-2")]),
                P([Span("卡片示例: ", cls="text-gray-400"), Span("（下方卡片应为深色背景）")]),
            ),
            cls="mb-6"
        ),

        Div(
            Div(
                H3("示例卡片", cls="text-lg font-semibold mb-2"),
                P("如果自定义样式生效，此卡片应为深色背景，白色文字。", cls="text-sm text-gray-400"),
                cls="card-body"
            ),
            cls="card"
        ),

        Script(
            """
            document.addEventListener('DOMContentLoaded', function(){
              const bg = getComputedStyle(document.body).backgroundColor;
              const fg = getComputedStyle(document.body).color;
              const ok = (bg === 'rgb(0, 0, 0)' && fg === 'rgb(255, 255, 255)');
              const result = document.getElementById('okx-result');
              result.textContent = ok ? 'OKX 主题生效' : '未生效或被覆盖';
              result.className = 'badge ' + (ok ? 'badge-success' : 'badge-warning') + ' text-white';
              document.getElementById('okx-bg').textContent = bg;
              document.getElementById('okx-fg').textContent = fg;
            });
            """
        ),
    )
    return create_layout("样式自检", content)

def okx_button(text: str, **kwargs):
    """OKX主题按钮组件"""
    cls = kwargs.pop('cls', 'btn btn-primary')
    return Button(text, cls=cls, **kwargs)

def okx_input(name: str = None, **kwargs):
    """OKX主题输入框组件"""
    cls = kwargs.pop('cls', 'input input-bordered w-full')
    if name:
        kwargs['name'] = name
    return Input(cls=cls, **kwargs)

def okx_textarea(name: str = None, **kwargs):
    """OKX主题文本域组件"""
    cls = kwargs.pop('cls', 'textarea textarea-bordered w-full')
    content = kwargs.pop('content', '')
    if name:
        kwargs['name'] = name
    return Textarea(content, cls=cls, **kwargs)

def okx_select(name: str = None, options: list = None, **kwargs):
    """OKX主题选择框组件"""
    cls = kwargs.pop('cls', 'select select-bordered w-full')
    selected = kwargs.pop('selected', None)
    if name:
        kwargs['name'] = name
    
    select_options = []
    if options:
        for option in options:
            if isinstance(option, tuple):
                value, label = option
                is_selected = (str(value) == str(selected)) if selected is not None else False
                select_options.append(Option(label, value=value, selected=is_selected))
            else:
                is_selected = (str(option) == str(selected)) if selected is not None else False
                select_options.append(Option(option, value=option, selected=is_selected))
    
    return Select(*select_options, cls=cls, **kwargs)

def okx_form_group(label: str, input_element, help_text: str = None, **kwargs):
    """OKX主题表单组组件"""
    elements = [
        Label(label, cls="label label-text"),
        input_element
    ]
    if help_text:
        elements.append(P(help_text, cls="text-sm text-gray-500 mt-1"))
    
    return Div(
        *elements,
        cls="form-control w-full mb-4",
        **kwargs
    )

# --- 订阅验证（FastHTML 原生路由） ---

@app.get("/subscription-old")
@require_auth
async def subscription_dashboard(_: Request):
    try:
        config = await system_config_manager.get_config(
            'subscription_verification_config',
            {"enabled": False, "required_subscriptions": []}
        )
        stats = await _subscription_stats_impl()
    except Exception as e:
        logger.error(f"获取订阅验证数据失败: {e}")
        raise StarletteHTTPException(status_code=500, detail="无法获取订阅验证数据")

    status_indicator = Div(
        Div(
            Span("🟢" if config.get("enabled") else "🔴", cls="text-2xl"),
            Div(
                H3("订阅验证状态", cls="text-lg font-semibold"),
                P("已启用" if config.get("enabled") else "已禁用", cls=f"text-sm {'text-success' if config.get('enabled') else 'text-error'}"),
                cls="ml-3"
            ),
            cls="flex items-center"
        ),
        cls="bg-white p-6 rounded-lg shadow mb-6"
    )

    channels = config.get("required_subscriptions", [])
    channel_rows = []
    for i, channel in enumerate(channels):
        channel_rows.append(
            Tr(
                Td(str(i + 1), cls="font-mono text-sm"),
                Td(Div(Strong(channel.get("display_name", "未命名")), P(channel.get("chat_id", ""), cls="text-xs text-gray-500 font-mono"), cls="space-y-1")),
                Td(A("🔗", href=channel.get("join_link", "#"), target="_blank", cls="btn btn-ghost btn-xs") if channel.get("join_link") else "无链接", cls="text-center"),
                Td(Div(
                    A("✏️", href=f"/subscription/channel/{i}/edit", cls="btn btn-ghost btn-xs", title="编辑"),
                    A("🗑️", href=f"/subscription/channel/{i}/delete", cls="btn btn-ghost btn-xs text-error", title="删除", onclick="return confirm('确定删除此频道配置？')"),
                    cls="flex gap-1"
                ))
            )
        )

    channels_table = Div(
        H3("📺 频道配置", cls="content-section-title"),
        Div(
            Table(
                Thead(Tr(Th("#"), Th("频道信息"), Th("加入链接", cls="text-center"), Th("操作", cls="w-20"))),
                Tbody(*channel_rows),
                cls="table table-zebra w-full"
            ) if channel_rows else Div(
                P("暂无配置频道", cls="text-gray-500 text-center py-8"),
                A("+ 添加频道", href="/subscription/channel/add", cls="btn btn-primary btn-sm")
            ),
            cls="data-table-container"
        )
    )

    add_channel_form = Form(
        Div(
            H3("➕ 添加频道", cls="text-lg font-semibold mb-4"),
            okx_form_group("频道名称", okx_input("display_name", placeholder="如：官方频道")),
            okx_form_group("频道ID", okx_input("chat_id", placeholder="@channel 或 -1001234567890")),
            okx_form_group("加入链接", okx_input("join_link", placeholder="https://t.me/channel")),
            okx_button("添加频道", type="submit", cls="btn btn-primary w-full"),
            cls="space-y-4"
        ),
        method="post", action="/subscription/channel/add",
        cls="card bg-base-100 shadow-lg p-6"
    )

    toolbar = Div(
        Div(H3("系统控制", cls="content-section-title"), P("频道订阅验证系统的开关和管理", cls="text-sm text-gray-500")),
        Div(
            Form(okx_button("🔴 禁用验证" if config.get("enabled") else "🟢 启用验证", type="submit", cls=f"btn {'btn-error' if config.get('enabled') else 'btn-success'} btn-sm"), method="post", action="/subscription/toggle", cls="inline-block mr-3"),
            A("📊 验证日志", href="/subscription/logs", cls="btn btn-info btn-sm mr-3"),
            A("⚙️ 频道配置", href="/subscription/channels", cls="btn btn-secondary btn-sm mr-3"),
            A("📈 数据分析", href="/subscription/analytics", cls="btn btn-outline btn-sm"),
            cls="action-buttons"
        ),
        cls="toolbar-container"
    )

    stats_cards = Div(
        Div(Div(Span("📺", cls="text-3xl"), Div(P("配置频道", cls="text-sm text-gray-500"), P(str(len(channels)), cls="text-2xl font-bold text-primary")), cls="flex items-center gap-3"), cls="stat-card"),
        Div(Div(Span("🔍", cls="text-3xl"), Div(P("今日验证", cls="text-sm text-gray-500"), P(str(stats['daily_verifications']), cls="text-2xl font-bold text-info")), cls="flex items=center gap-3"), cls="stat-card"),
        Div(Div(Span("✅", cls="text-3xl"), Div(P("通过率", cls="text-sm text-gray-500"), P(f"{stats['pass_rate']:.1f}%", cls="text-2xl font-bold text-success")), cls="flex items-center gap-3"), cls="stat-card"),
        Div(Div(Span("❌", cls="text-3xl"), Div(P("今日失败", cls="text-sm text-gray-500"), P(str(stats['daily_failures']), cls="text-2xl font-bold text-warning")), cls="flex items-center gap-3"), cls="stat-card"),
        cls="stats-container"
    )

    content = Div(
        Div(H1("频道订阅验证管理", cls="page-title"), A("查看分析", href="/subscription/analytics", cls="btn btn-outline btn-sm"), cls="page-header"),
        status_indicator,
        stats_cards,
        toolbar,
        Div(Div(channels_table, cls="lg:col-span-2"), Div(add_channel_form, cls="space-y-6"), cls="content-grid grid-3")
    )

    return create_layout("频道订阅验证管理", content)

@app.post("/subscription-old/toggle")
@require_auth
async def toggle_subscription_verification(_: Request):
    try:
        config = await system_config_manager.get_config('subscription_verification_config', {"enabled": False, "required_subscriptions": []})
        config["enabled"] = not config.get("enabled", False)
        await system_config_manager.set_config('subscription_verification_config', config, '频道订阅验证配置')
        return RedirectResponse(url="/subscription?status_changed=1", status_code=302)
    except Exception as e:
        logger.error(f"切换订阅验证状态失败: {e}")
        return RedirectResponse(url="/subscription?error=toggle_failed", status_code=302)

@app.post("/subscription-old/channel/add")
@require_auth
async def add_subscription_channel(request: Request):
    form = await request.form()
    try:
        display_name = form.get('display_name', '').strip()
        chat_id = form.get('chat_id', '').strip()
        join_link = form.get('join_link', '').strip()
        if not display_name or not chat_id:
            return RedirectResponse(url="/subscription?error=missing_fields", status_code=302)
        config = await system_config_manager.get_config('subscription_verification_config', {"enabled": False, "required_subscriptions": []})
        existing_ids = [sub.get("chat_id") for sub in config.get("required_subscriptions", [])]
        if chat_id in existing_ids:
            return RedirectResponse(url="/subscription?error=duplicate_chat_id", status_code=302)
        new_channel = {"chat_id": chat_id, "display_name": display_name, "join_link": join_link or None}
        config.setdefault("required_subscriptions", []).append(new_channel)
        await system_config_manager.set_config('subscription_verification_config', config, '频道订阅验证配置')
        return RedirectResponse(url="/subscription?channel_added=1", status_code=302)
    except Exception as e:
        logger.error(f"添加频道失败: {e}")
        return RedirectResponse(url="/subscription?error=add_failed", status_code=302)

@app.get("/subscription-old/channel/{index:int}/delete")
@require_auth
async def delete_subscription_channel(request: Request):
    try:
        index = int(request.path_params['index'])
        config = await system_config_manager.get_config('subscription_verification_config', {"enabled": False, "required_subscriptions": []})
        subs = config.get("required_subscriptions", [])
        if 0 <= index < len(subs):
            subs.pop(index)
            await system_config_manager.set_config('subscription_verification_config', config, '频道订阅验证配置')
            return RedirectResponse(url="/subscription?channel_deleted=1", status_code=302)
        return RedirectResponse(url="/subscription?error=invalid_index", status_code=302)
    except Exception as e:
        logger.error(f"删除频道失败: {e}")
        return RedirectResponse(url="/subscription?error=delete_failed", status_code=302)

# --- 核心路由 (仅保留根路由/仪表板) ---

@app.get("/login")
def login_page(request: Request):
    """登录页面"""
    if AuthManager.is_admin_session(request):
        return RedirectResponse(url="/", status_code=302)
    
    login_form = Form(
        Div(
            H2("管理员登录", cls="text-2xl font-bold text-center mb-6"),
            Div(
                okx_form_group("密码", okx_input("password", type="password", placeholder="请输入管理员密码")),
                okx_button("登录", type="submit", cls="btn btn-primary w-full"),
                cls="space-y-4"
            ),
            cls="card-body"
        ),
        method="post",
        action="/login",
        cls="card w-full max-w-sm mx-auto mt-16 shadow-xl bg-base-100"
    )
    
    return create_layout("管理员登录", login_form, show_nav=False)

@app.post("/login")
async def login_submit(request: Request):
    """处理登录提交"""
    form = await request.form()
    password = form.get('password', '')
    
    # 验证管理员密码
    from config import WEB_CONFIG
    admin_password = WEB_CONFIG.get("admin_password", "admin123")
    
    if AuthManager.verify_password(password, AuthManager.hash_password(admin_password)):
        # 使用默认管理员ID登录
        from config import ADMIN_IDS
        admin_id = ADMIN_IDS[0] if ADMIN_IDS else 1
        AuthManager.login_admin(request, admin_id)
        return RedirectResponse(url="/", status_code=302)
    
    # 登录失败，重新显示登录页面
    error_form = Form(
        Div(
            H2("管理员登录", cls="text-2xl font-bold text-center mb-6"),
            Div(
                Div("密码错误，请重试", cls="alert alert-error mb-4"),
                okx_form_group("密码", okx_input("password", type="password", placeholder="请输入管理员密码")),
                okx_button("登录", type="submit", cls="btn btn-primary w-full"),
                cls="space-y-4"
            ),
            cls="card-body"
        ),
        method="post",
        action="/login",
        cls="card w-full max-w-sm mx-auto mt-16 shadow-xl bg-base-100"
    )
    
    return create_layout("管理员登录", error_form, show_nav=False)

@app.get("/logout")
def logout(request: Request):
    """登出"""
    AuthManager.logout(request)
    return RedirectResponse(url="/login", status_code=302)

@app.get("/")
async def dashboard(request: Request):
    """仪表板页面 - 基于实际数据的统计显示"""
    # 简易缓存命中：减少频繁 COUNT/聚合导致的首屏抖动
    global _dashboard_cache_ts, _dashboard_cache_payload
    now = time.time()
    if _dashboard_cache_ts and (now - _dashboard_cache_ts) < DASHBOARD_CACHE_TTL and _dashboard_cache_payload:
        total_merchants = _dashboard_cache_payload.get('total_merchants', 0)
        approved_merchants = _dashboard_cache_payload.get('approved_merchants', 0)
        review_total = _dashboard_cache_payload.get('review_total', 0)
        review_avg = _dashboard_cache_payload.get('review_avg', 0)
        binding_total = _dashboard_cache_payload.get('binding_total', 0)
        binding_used = _dashboard_cache_payload.get('binding_used', 0)
        binding_usage_rate = _dashboard_cache_payload.get('binding_usage_rate', 0)
        cities = _dashboard_cache_payload.get('cities', [])
        districts = _dashboard_cache_payload.get('districts', [])
        template_count = _dashboard_cache_payload.get('template_count', 0)
    else:
        try:
            # 获取商户实际统计数据
            merchant_stats = await merchant_manager.get_merchant_statistics()
            total_merchants = merchant_stats.get('total', 0)
            approved_merchants = merchant_stats.get('approved', 0)
            
            # 获取评价实际统计数据
            try:
                review_total = await review_manager.count_reviews()
                review_avg = await review_manager.get_average_rating()
            except:
                review_total = 0
                review_avg = 0
            
            # 获取绑定码统计数据
            try:
                binding_stats = await binding_codes_manager.get_binding_code_statistics()
                binding_total = binding_stats.get('total_codes', 0)
                binding_used = binding_stats.get('used_codes', 0)
                binding_usage_rate = binding_stats.get('usage_rate', 0)
            except:
                binding_total = 0
                binding_used = 0
                binding_usage_rate = 0
            
            # 获取地区实际数据
            try:
                cities = await region_manager.get_all_cities()
                districts = await region_manager.get_all_districts()
            except:
                cities = []
                districts = []
            
            # 获取模板配置数量（从模板表）
            try:
                from database.db_templates import template_manager
                template_count = len(await template_manager.get_all_templates())
            except:
                template_count = 0
            # 写入缓存
            _dashboard_cache_payload = {
                'total_merchants': total_merchants,
                'approved_merchants': approved_merchants,
                'review_total': review_total,
                'review_avg': review_avg,
                'binding_total': binding_total,
                'binding_used': binding_used,
                'binding_usage_rate': binding_usage_rate,
                'cities': cities,
                'districts': districts,
                'template_count': template_count,
            }
            _dashboard_cache_ts = now
        except Exception as e:
            logger.error(f"获取统计数据失败: {e}")
            total_merchants = 0
            approved_merchants = 0
            review_total = 0
            review_avg = 0
            binding_total = 0
            binding_used = 0
            binding_usage_rate = 0
            cities = []
            districts = []
            template_count = 0
    
    content = Div(
        # 使用统一的页面头部
        Div(
            H1("系统仪表板", cls="page-title"),
            P(f"数据更新时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", cls="page-subtitle"),
            cls="page-header"
        ),
        
        # 使用统一的页面内容布局
        Div(
            # 第一行 - 核心业务数据
            Div(
                # 商户总数
                Div(
                    Div(
                        Span("🏪", cls="text-4xl mb-2"),
                        H3("商户总数", cls="font-bold text-white"),
                        P("已注册商户", cls="text-gray-300 text-sm"),
                        cls="text-center"
                    ),
                    Div(
                        Span(str(total_merchants), cls="text-4xl font-bold text-blue-400"),
                        P("个商户", cls="text-gray-400 text-sm mt-1"),
                        cls="text-center"
                    ),
                    cls="stat-card"
                ),
                
                # 活跃商户
                Div(
                    Div(
                        Span("✅", cls="text-4xl mb-2"),
                        H3("活跃商户", cls="font-bold text-white"),
                        P("已审核通过", cls="text-gray-300 text-sm"),
                        cls="text-center"
                    ),
                    Div(
                        Span(str(approved_merchants), cls="text-4xl font-bold text-green-400"),
                        P("个活跃", cls="text-gray-400 text-sm mt-1"),
                        cls="text-center"
                    ),
                    cls="stat-card"
                ),
                
                # 绑定码总数
                Div(
                    Div(
                        Span("🎫", cls="text-4xl mb-2"),
                        H3("绑定码", cls="font-bold text-white"),
                        P("系统绑定码", cls="text-gray-300 text-sm"),
                        cls="text-center"
                    ),
                    Div(
                        Span(str(binding_total), cls="text-4xl font-bold text-purple-400"),
                        P("个绑定码", cls="text-gray-400 text-sm mt-1"),
                        cls="text-center"
                    ),
                    cls="stat-card"
                ),
                
                # 绑定码使用率
                Div(
                    Div(
                        Span("📊", cls="text-4xl mb-2"),
                        H3("使用率", cls="font-bold text-white"),
                        P("绑定码使用率", cls="text-gray-300 text-sm"),
                        cls="text-center"
                    ),
                    Div(
                        Span(f"{binding_usage_rate:.1f}%" if binding_usage_rate > 0 else "0.0%", cls="text-4xl font-bold text-pink-400"),
                        P(f"({binding_used}/{binding_total})", cls="text-gray-400 text-sm mt-1"),
                        cls="text-center"
                    ),
                    cls="stat-card"
                ),
                
                cls="stats-container"
            ),
            
            # 第二行 - 业务评价数据
            Div(
                # 评价总数
                Div(
                    Div(
                        Span("⭐", cls="text-4xl mb-2"),
                        H3("评价总数", cls="font-bold text-white"),
                        P("用户评价数", cls="text-gray-300 text-sm"),
                        cls="text-center"
                    ),
                    Div(
                        Span(str(review_total), cls="text-4xl font-bold text-yellow-400"),
                        P("条评价", cls="text-gray-400 text-sm mt-1"),
                        cls="text-center"
                    ),
                    cls="stat-card"
                ),
                
                # 平均评分
                Div(
                    Div(
                        Span("📈", cls="text-4xl mb-2"),
                        H3("平均评分", cls="font-bold text-white"),
                        P("五维平均分", cls="text-gray-300 text-sm"),
                        cls="text-center"
                    ),
                    Div(
                        Span(f"{review_avg:.1f}" if review_avg > 0 else "0.0", cls="text-4xl font-bold text-orange-400"),
                        P("分 (满分10)", cls="text-gray-400 text-sm mt-1"),
                        cls="text-center"
                    ),
                    cls="stat-card"
                ),
                
                # 地区覆盖
                Div(
                    Div(
                        Span("🗺️", cls="text-4xl mb-2"),
                        H3("地区覆盖", cls="font-bold text-white"),
                        P("城市+区县", cls="text-gray-300 text-sm"),
                        cls="text-center"
                    ),
                    Div(
                        Span(f"{len(cities)}+{len(districts)}", cls="text-4xl font-bold text-cyan-400"),
                        P("个地区", cls="text-gray-400 text-sm mt-1"),
                        cls="text-center"
                    ),
                    cls="stat-card"
                ),
                
                # 系统模板
                Div(
                    Div(
                        Span("📋", cls="text-4xl mb-2"),
                        H3("系统模板", cls="font-bold text-white"),
                        P("配置模板数", cls="text-gray-300 text-sm"),
                        cls="text-center"
                    ),
                    Div(
                        Span(str(template_count), cls="text-4xl font-bold text-indigo-400"),
                        P("个模板", cls="text-gray-400 text-sm mt-1"),
                        cls="text-center"
                    ),
                    cls="stat-card"
                ),
                
                cls="stats-container"
            ),
            
            cls="page-content"
        )
    )
    
    return create_layout("仪表板", content)

# --- 地区管理模块 FastHTML 原生路由 ---

@app.get("/regions")
@require_auth
async def regions_list(request: Request):
    """地区管理页面"""
    try:
        logger.info("开始调用 region_manager.get_all_cities()")
        cities = await region_manager.get_all_cities()
        logger.info(f"cities 获取成功: {len(cities)} 条")
        # 仅用于下拉选择：只展示启用城市，避免向禁用城市添加地区
        active_cities = [c for c in cities if c.get('is_active', True)]
        
        logger.info("开始调用 region_manager.get_all_districts()")
        districts = await region_manager.get_all_districts()
        logger.info(f"districts 获取成功: {len(districts)} 条")
        
    except Exception as e:
        logger.error(f"获取地区数据失败: {e}")
        import traceback
        logger.error(f"完整堆栈: {traceback.format_exc()}")
        error_content = Div(
            H1("错误调试", cls="text-2xl font-bold text-red-600 mb-4"),
            Pre(f"{str(e)}\n\n{traceback.format_exc()}", cls="bg-gray-100 p-4 rounded text-sm")
        )
        return create_layout("系统错误", error_content)

    # 获取URL参数
    params = request.query_params
    success_msg = None
    error_msg = None
    
    # 搜索筛选参数
    city_search = params.get('city_search', '').strip()
    district_search = params.get('district_search', '').strip()
    status_filter = params.get('status_filter', '').strip()
    
    # 筛选城市
    if city_search:
        cities = [c for c in cities if city_search.lower() in c['name'].lower()]
    
    # 筛选地区
    if district_search:
        districts = [d for d in districts if district_search.lower() in d['name'].lower()]
    
    # 状态筛选
    if status_filter:
        if status_filter == 'enabled':
            cities = [c for c in cities if c['is_active']]
            districts = [d for d in districts if d['is_active']]
        elif status_filter == 'disabled':
            cities = [c for c in cities if not c['is_active']]
            districts = [d for d in districts if not d['is_active']]
    
    if params.get('city_added'):
        success_msg = "城市添加成功！"
    elif params.get('district_added'):
        success_msg = "地区添加成功！"
    elif params.get('city_updated'):
        success_msg = "城市更新成功！"
    elif params.get('district_updated'):
        success_msg = "地区更新成功！"
    elif params.get('city_deleted'):
        success_msg = "城市删除成功！"
    elif params.get('district_deleted'):
        success_msg = "地区删除成功！"
    elif params.get('error') == 'empty_name':
        error_msg = "名称不能为空！"
    elif params.get('error') == 'invalid_city':
        error_msg = "请选择有效的城市！"
    elif params.get('error') == 'city_not_found':
        error_msg = "城市不存在！"
    elif params.get('error') == 'district_not_found':
        error_msg = "地区不存在！"
    elif params.get('error') == 'delete_failed':
        error_msg = "删除失败，可能存在关联数据！"
    elif params.get('error') == 'update_failed':
        error_msg = "更新失败，请重试！"
    elif params.get('error'):
        error_msg = "操作失败，请重试！"

    # 生成CSRF Token
    csrf_token = get_or_create_csrf_token(request)

    # 创建完整的地区管理CRUD页面
    content = Div(
        H1("地区管理", cls="page-title"),
        
        # 提示信息
        *([Div(success_msg, cls="alert alert-success mb-4")] if success_msg else []),
        *([Div(error_msg, cls="alert alert-error mb-4")] if error_msg else []),
        
        # 数据统计
        Div(
            H3("数据统计", cls="text-xl font-semibold mb-4"),
            Div(
                Div(
                    Div("城市总数", cls="stat-title"),
                    Div(str(len(cities)), cls="stat-value text-primary"),
                    cls="stat"
                ),
                Div(
                    Div("地区总数", cls="stat-title"),
                    Div(str(len(districts)), cls="stat-value text-secondary"),
                    cls="stat"
                ),
                cls="stats shadow mb-6"
            )
        ),
        
        # 搜索筛选工具栏
        Div(
            H3("搜索筛选", cls="text-xl font-semibold mb-4"),
            Form(
                Div(
                    Div(
                        Label("城市搜索", cls="label"),
                        Input(
                            name="city_search",
                            placeholder="输入城市名称搜索...",
                            value=city_search,
                            cls="input input-bordered w-full"
                        ),
                        cls="form-control"
                    ),
                    Div(
                        Label("地区搜索", cls="label"),
                        Input(
                            name="district_search",
                            placeholder="输入地区名称搜索...",
                            value=district_search,
                            cls="input input-bordered w-full"
                        ),
                        cls="form-control"
                    ),
                    Div(
                        Label("状态筛选", cls="label"),
                        Select(
                            Option("全部状态", value="", selected=(not status_filter)),
                            Option("启用", value="enabled", selected=(status_filter == "enabled")),
                            Option("禁用", value="disabled", selected=(status_filter == "disabled")),
                            name="status_filter",
                            cls="select select-bordered w-full"
                        ),
                        cls="form-control"
                    ),
                    Div(
                        Button("搜索筛选", type="submit", cls="btn btn-primary"),
                        Button("清除筛选", type="button", onclick="window.location.href='/regions'", cls="btn btn-ghost ml-2"),
                        cls="form-control mt-4"
                    ),
                    cls="grid grid-cols-1 md:grid-cols-4 gap-4"
                ),
                method="GET",
                action="/regions",
                cls="card bg-base-100 shadow-xl p-6 mb-6"
            )
        ),
        
        # 添加城市表单
        Div(
            H3("添加城市", cls="text-xl font-semibold mb-4"),
            Form(
                Div(
                    Input(type="hidden", name="csrf_token", value=csrf_token),
                    okx_form_group("城市名称", okx_input("city_name", placeholder="请输入城市名称", required=True, **{"data-test": "city-name-input"})),
                    okx_form_group("显示顺序", okx_input("display_order", type="number", placeholder="可选，数字越小越靠前", value="0", **{"data-test": "city-order-input"})),
                    okx_button("添加城市", type="submit", cls="btn btn-primary", **{"data-test": "save-city-btn"}),
                    cls="grid grid-cols-1 md:grid-cols-3 gap-4 items-end"
                ),
                method="post",
                action="/regions/city/add",
                cls="card bg-base-100 shadow-xl p-6 mb-6"
            )
        ),
        
        # 添加地区表单（仅允许选择启用的城市）
        Div(
            H3("添加地区", cls="text-xl font-semibold mb-4"),
            Form(
                Div(
                    Input(type="hidden", name="csrf_token", value=csrf_token),
                    okx_form_group(
                        "所属城市",
                        okx_select("city_id", options=[(city['id'], city['name']) for city in active_cities], selected=None, **{"data-test": "city-selector"})
                    ) if active_cities else P("请先启用至少一个城市", cls="text-red-500"),
                    okx_form_group("地区名称", okx_input("district_name", placeholder="请输入地区名称", required=True, **{"data-test": "district-name-input"})),
                    okx_form_group("显示顺序", okx_input("display_order", type="number", placeholder="可选，数字越小越靠前", value="0", **{"data-test": "district-order-input"})),
                    (okx_button("添加地区", type="submit", cls="btn btn-secondary", **{"data-test": "save-district-btn"}) if active_cities else okx_button("添加地区", type="button", cls="btn btn-disabled", disabled=True)),
                    cls="grid grid-cols-1 md:grid-cols-4 gap-4 items-end"
                ),
                method="post",
                action="/regions/district/add",
                cls="card bg-base-100 shadow-xl p-6 mb-6"
            ) if cities else Div(
                P("请先添加城市，然后才能添加地区", cls="text-center text-gray-500 py-8"),
                cls="card bg-base-100 shadow-xl p-6 mb-6"
            )
        ),
        
        # 城市列表
        Div(
            H3("城市列表", cls="text-xl font-semibold mb-4"),
            Div(
                Table(
                    Thead(
                        Tr(
                            Th("ID"),
                            Th("城市名称"),
                            Th("显示顺序"),
                            Th("状态"),
                            Th("创建时间"),
                            Th("操作")
                        )
                    ),
                    Tbody(
                        *[
                            Tr(
                                Td(str(city['id'])),
                                Td(city['name']),
                                Td(str(city.get('display_order', 0))),
                                Td(
                                    Div(
                                        Span("✅ 启用", cls="badge badge-success text-white mr-2", title="启用") if city.get('is_active', True) else Span("❌ 禁用", cls="badge badge-error text-white mr-2", title="禁用"),
                                        Form(
                                            Input(type="hidden", name="csrf_token", value=csrf_token),
                                            okx_button("切换", type="submit", cls="btn btn-ghost btn-xs", **{"data-test": f"toggle-city-{city['id']}"}),
                                            method="post",
                                            action=f"/regions/city/{city['id']}/toggle",
                                        ),
                                        cls="flex items-center"
                                    )
                                ),
                                Td(city.get('created_at', '未知')[:19] if city.get('created_at') else '未知'),
                                Td(
                                    Div(
                                        A("编辑", href=f"/regions/city/{city['id']}/edit", cls="btn btn-sm btn-outline btn-primary mr-2", **{"data-test": f"edit-city-{city['id']}"}),
                                        Form(
                                            Input(type="hidden", name="csrf_token", value=csrf_token),
                                            okx_button("删除", type="submit", cls="btn btn-sm btn-outline btn-error", **{"data-test": f"delete-city-{city['id']}"}),
                                            method="post",
                                            action=f"/regions/city/{city['id']}/delete",
                                            onsubmit=f"return confirm('确定删除城市 {city['name']} 吗？')"
                                        ),
                                        cls="flex gap-2"
                                    )
                                )
                            ) for city in cities
                        ] if cities else [
                            Tr(
                                Td("暂无城市数据", colspan="6", cls="text-center text-gray-500")
                            )
                        ]
                    ),
                    cls="table table-zebra w-full"
                ),
                cls="overflow-x-auto"
            ),
            cls="card bg-base-100 shadow-xl p-6 mb-6"
        ),
        
        # 地区列表
        Div(
            H3("地区列表", cls="text-xl font-semibold mb-4"),
            Div(
                Table(
                    Thead(
                        Tr(
                            Th("ID"),
                            Th("地区名称"),
                            Th("所属城市"),
                            Th("显示顺序"),
                            Th("状态"),
                            Th("创建时间"),
                            Th("操作")
                        )
                    ),
                    Tbody(
                        *[
                            Tr(
                                Td(str(district['id'])),
                                Td(district['name']),
                                Td(district.get('city_name', '未知')),
                                Td(str(district.get('display_order', 0))),
                                Td(
                                    Div(
                                        Span("✅ 启用", cls="badge badge-success text-white mr-2", title="启用") if district.get('is_active', True) else Span("❌ 禁用", cls="badge badge-error text-white mr-2", title="禁用"),
                                        Form(
                                            Input(type="hidden", name="csrf_token", value=csrf_token),
                                            okx_button("切换", type="submit", cls="btn btn-ghost btn-xs", **{"data-test": f"toggle-district-{district['id']}"}),
                                            method="post",
                                            action=f"/regions/district/{district['id']}/toggle",
                                        ),
                                        cls="flex items-center"
                                    )
                                ),
                                Td(district.get('created_at', '未知')[:19] if district.get('created_at') else '未知'),
                                Td(
                                    Div(
                                        A("编辑", href=f"/regions/district/{district['id']}/edit", cls="btn btn-sm btn-outline btn-primary mr-2", **{"data-test": f"edit-district-{district['id']}"}),
                                        Form(
                                            Input(type="hidden", name="csrf_token", value=csrf_token),
                                            okx_button("删除", type="submit", cls="btn btn-sm btn-outline btn-error", **{"data-test": f"delete-district-{district['id']}"}),
                                            method="post",
                                            action=f"/regions/district/{district['id']}/delete",
                                            onsubmit=f"return confirm('确定删除地区 {district['name']} 吗？')"
                                        ),
                                        cls="flex gap-2"
                                    )
                                )
                            ) for district in districts
                        ] if districts else [
                            Tr(
                                Td("暂无地区数据", colspan="7", cls="text-center text-gray-500")
                            )
                        ]
                    ),
                    cls="table table-zebra w-full"
                ),
                cls="overflow-x-auto"
            ),
            cls="card bg-base-100 shadow-xl p-6"
        )
    )
    
    return create_layout("地区管理", content)

@app.post("/regions/city/add")
@require_auth
async def add_city_route(request: Request):
    """添加城市"""
    form = await request.form()
    
    try:
        # CSRF校验
        if not validate_csrf(request, form.get('csrf_token', '')):
            return RedirectResponse(url="/regions?error=csrf", status_code=302)
        city_name = form.get('city_name', '').strip()
        display_order = int(form.get('display_order', 0))
        
        if not city_name:
            return RedirectResponse(url="/regions?error=empty_name", status_code=302)
        
        city_id = await region_manager.add_city(city_name)
        
        if city_id:
            # 如果需要设置显示顺序，更新city
            if display_order > 0:
                await region_manager.update_city_display_order(city_id, display_order)
            admin_id = request.session.get('admin_id')
            logger.info(f"[audit] admin={admin_id} 新增城市 id={city_id} name={city_name} order={display_order}")
            return RedirectResponse(url="/regions?city_added=1", status_code=302)
        else:
            return RedirectResponse(url="/regions?error=1", status_code=302)
            
    except Exception as e:
        logger.error(f"添加城市时出错: {e}")
        return RedirectResponse(url="/regions?error=1", status_code=302)

@app.post("/regions/district/add")
@require_auth
async def add_district_route(request: Request):
    """添加地区"""
    form = await request.form()
    
    try:
        # CSRF校验
        if not validate_csrf(request, form.get('csrf_token', '')):
            return RedirectResponse(url="/regions?error=csrf", status_code=302)
        city_id = int(form.get('city_id', 0))
        district_name = form.get('district_name', '').strip()
        display_order = int(form.get('display_order', 0))
        
        if not district_name:
            return RedirectResponse(url="/regions?error=empty_name", status_code=302)
        
        if city_id <= 0:
            return RedirectResponse(url="/regions?error=invalid_city", status_code=302)
        
        district_id = await region_manager.add_district(city_id, district_name)
        
        if district_id:
            # 如果需要设置显示顺序，更新district
            if display_order > 0:
                await region_manager.update_district_display_order(district_id, display_order)
            admin_id = request.session.get('admin_id')
            logger.info(f"[audit] admin={admin_id} 新增地区 id={district_id} name={district_name} city_id={city_id} order={display_order}")
            return RedirectResponse(url="/regions?district_added=1", status_code=302)
        else:
            return RedirectResponse(url="/regions?error=1", status_code=302)
            
    except Exception as e:
        logger.error(f"添加地区时出错: {e}")
        return RedirectResponse(url="/regions?error=1", status_code=302)

@app.post("/regions/city/{city_id}/delete")
@require_auth
async def delete_city_route(request: Request):
    """删除城市（POST）"""
    city_id = request.path_params.get('city_id')
    form = await request.form()
    
    try:
        if not validate_csrf(request, form.get('csrf_token', '')):
            return RedirectResponse(url="/regions?error=csrf", status_code=302)
        city_id = int(city_id)
        success = await region_manager.delete_city(city_id)
        admin_id = request.session.get('admin_id')
        if success:
            logger.info(f"[audit] admin={admin_id} 删除城市 id={city_id}")
            return RedirectResponse(url="/regions?city_deleted=1", status_code=302)
        else:
            return RedirectResponse(url="/regions?error=delete_failed", status_code=302)
            
    except Exception as e:
        logger.error(f"删除城市时出错: {e}")
        return RedirectResponse(url="/regions?error=1", status_code=302)

@app.post("/regions/district/{district_id}/delete")
@require_auth
async def delete_district_route(request: Request):
    """删除地区（POST）"""
    district_id = request.path_params.get('district_id')
    form = await request.form()
    
    try:
        if not validate_csrf(request, form.get('csrf_token', '')):
            return RedirectResponse(url="/regions?error=csrf", status_code=302)
        district_id = int(district_id)
        success = await region_manager.delete_district(district_id)
        admin_id = request.session.get('admin_id')
        if success:
            logger.info(f"[audit] admin={admin_id} 删除地区 id={district_id}")
            return RedirectResponse(url="/regions?district_deleted=1", status_code=302)
        else:
            return RedirectResponse(url="/regions?error=delete_failed", status_code=302)
            
    except Exception as e:
        logger.error(f"删除地区时出错: {e}")
        return RedirectResponse(url="/regions?error=1", status_code=302)

@app.get("/regions/city/{city_id}/edit")
@require_auth
async def edit_city_get_route(request: Request):
    """城市编辑页面"""
    city_id = request.path_params.get('city_id')
    
    try:
        city_id = int(city_id)
        city = await region_manager.get_city_by_id(city_id)
        
        if not city:
            return RedirectResponse(url="/regions?error=city_not_found", status_code=302)
        
        # 显示编辑表单
        csrf_token = get_or_create_csrf_token(request)
        content = Div(
            H2("编辑城市", cls="text-2xl font-bold mb-6"),
            Form(
                Input(type="hidden", name="csrf_token", value=csrf_token),
                okx_form_group("城市名称", okx_input("city_name", value=city['name'], required=True, **{"data-test": "edit-city-name"})),
                okx_form_group("显示顺序", okx_input("display_order", type="number", value=str(city.get('display_order', 0)), **{"data-test": "edit-city-order"})),
                Div(
                    okx_button("保存", type="submit", cls="btn btn-primary mr-2", **{"data-test": "save-edit-city"}),
                    A("取消", href="/regions", cls="btn btn-secondary"),
                    cls="flex gap-2"
                ),
                method="post",
                action=f"/regions/city/{city_id}/edit",
                cls="card bg-base-100 shadow-xl p-6"
            )
        )
        return create_layout("编辑城市", content)
                
    except Exception as e:
        logger.error(f"编辑城市时出错: {e}")
        return RedirectResponse(url="/regions?error=1", status_code=302)

@app.post("/regions/city/{city_id}/edit")
@require_auth
async def edit_city_post_route(request: Request):
    """处理城市编辑"""
    city_id = request.path_params.get('city_id')
    
    try:
        city_id = int(city_id)
        form = await request.form()
        if not validate_csrf(request, form.get('csrf_token', '')):
            return RedirectResponse(url=f"/regions/city/{city_id}/edit?error=csrf", status_code=302)
        city_name = form.get('city_name', '').strip()
        display_order = int(form.get('display_order', 0))
        
        if not city_name:
            return RedirectResponse(url=f"/regions/city/{city_id}/edit?error=empty_name", status_code=302)
        
        # 更新城市信息
        name_success = await region_manager.update_city_name(city_id, city_name)
        order_success = await region_manager.update_city_display_order(city_id, display_order)
        
        if name_success and order_success:
            admin_id = request.session.get('admin_id')
            logger.info(f"[audit] admin={admin_id} 更新城市 id={city_id} name={city_name} order={display_order}")
            return RedirectResponse(url="/regions?city_updated=1", status_code=302)
        else:
            return RedirectResponse(url=f"/regions/city/{city_id}/edit?error=update_failed", status_code=302)
            
    except Exception as e:
        logger.error(f"编辑城市时出错: {e}")
        return RedirectResponse(url="/regions?error=1", status_code=302)

@app.get("/regions/district/{district_id}/edit")
@require_auth
async def edit_district_get_route(request: Request):
    """地区编辑页面"""
    district_id = request.path_params.get('district_id')
    
    try:
        district_id = int(district_id)
        district = await region_manager.get_district_by_id(district_id)
        cities = await region_manager.get_all_cities()
        
        if not district:
            return RedirectResponse(url="/regions?error=district_not_found", status_code=302)
        
        # 显示编辑表单
        csrf_token = get_or_create_csrf_token(request)
        content = Div(
            H2("编辑地区", cls="text-2xl font-bold mb-6"),
            Form(
                Input(type="hidden", name="csrf_token", value=csrf_token),
                okx_form_group("所属城市", okx_select("city_id", options=[(city['id'], city['name']) for city in cities], selected=district.get('city_id'), **{"data-test": "edit-district-city"})),
                okx_form_group("地区名称", okx_input("district_name", value=district['name'], required=True, **{"data-test": "edit-district-name"})),
                okx_form_group("显示顺序", okx_input("display_order", type="number", value=str(district.get('display_order', 0)), **{"data-test": "edit-district-order"})),
                Div(
                    okx_button("保存", type="submit", cls="btn btn-primary mr-2", **{"data-test": "save-edit-district"}),
                    A("取消", href="/regions", cls="btn btn-secondary"),
                    cls="flex gap-2"
                ),
                method="post",
                action=f"/regions/district/{district_id}/edit",
                cls="card bg-base-100 shadow-xl p-6"
            )
        )
        return create_layout("编辑地区", content)
                
    except Exception as e:
        logger.error(f"编辑地区时出错: {e}")
        return RedirectResponse(url="/regions?error=1", status_code=302)

@app.post("/regions/district/{district_id}/edit")
@require_auth
async def edit_district_post_route(request: Request):
    """处理地区编辑"""
    district_id = request.path_params.get('district_id')
    
    try:
        district_id = int(district_id)
        form = await request.form()
        if not validate_csrf(request, form.get('csrf_token', '')):
            return RedirectResponse(url=f"/regions/district/{district_id}/edit?error=csrf", status_code=302)
        district_name = form.get('district_name', '').strip()
        display_order = int(form.get('display_order', 0))
        
        if not district_name:
            return RedirectResponse(url=f"/regions/district/{district_id}/edit?error=empty_name", status_code=302)
        
        # 更新地区信息
        name_success = await region_manager.update_district_name(district_id, district_name)
        order_success = await region_manager.update_district_display_order(district_id, display_order)
        
        if name_success and order_success:
            admin_id = request.session.get('admin_id')
            logger.info(f"[audit] admin={admin_id} 更新地区 id={district_id} name={district_name} order={display_order}")
            return RedirectResponse(url="/regions?district_updated=1", status_code=302)
        else:
            return RedirectResponse(url=f"/regions/district/{district_id}/edit?error=update_failed", status_code=302)
            
    except Exception as e:
        logger.error(f"编辑地区时出错: {e}")
        return RedirectResponse(url="/regions?error=1", status_code=302)

# --- 状态切换（POST） ---

@app.post("/regions/city/{city_id}/toggle")
@require_auth
async def toggle_city_status_route(request: Request):
    city_id = int(request.path_params.get('city_id'))
    form = await request.form()
    try:
        if not validate_csrf(request, form.get('csrf_token', '')):
            return RedirectResponse(url="/regions?error=csrf", status_code=302)
        success = await region_manager.toggle_city_status(city_id)
        admin_id = request.session.get('admin_id')
        if success:
            logger.info(f"[audit] admin={admin_id} 切换城市状态 id={city_id}")
        return RedirectResponse(url="/regions", status_code=302)
    except Exception as e:
        logger.error(f"切换城市状态失败: {e}")
        return RedirectResponse(url="/regions?error=1", status_code=302)

@app.post("/regions/district/{district_id}/toggle")
@require_auth
async def toggle_district_status_route(request: Request):
    district_id = int(request.path_params.get('district_id'))
    form = await request.form()
    try:
        if not validate_csrf(request, form.get('csrf_token', '')):
            return RedirectResponse(url="/regions?error=csrf", status_code=302)
        success = await region_manager.toggle_district_status(district_id)
        admin_id = request.session.get('admin_id')
        if success:
            logger.info(f"[audit] admin={admin_id} 切换地区状态 id={district_id}")
        return RedirectResponse(url="/regions", status_code=302)
    except Exception as e:
        logger.error(f"切换地区状态失败: {e}")
        return RedirectResponse(url="/regions?error=1", status_code=302)

# --- 商户管理模块 FastHTML 原生路由 ---

@app.get("/merchants")
async def merchants_list(request: Request):
    """商户管理页面"""
    try:
        # 获取查询参数
        params = request.query_params
        status_filter = params.get('status', 'pending_approval')
        search_query = params.get('search', '').strip()
        
        # 状态为“全部”时不传过滤参数
        effective_status = status_filter if (status_filter and status_filter != 'all') else None
        # 获取商户数据
        merchants = await merchant_manager.get_merchants(status=effective_status, search=search_query)
        
        # 统计数据
        all_merchants = await merchant_manager.get_merchants()
        total_count = len(all_merchants)
        filtered_count = len(merchants)
        
        # 状态统计
        status_counts = {}
        for merchant in all_merchants:
            status = merchant.get('status', 'unknown')
            status_counts[status] = status_counts.get(status, 0) + 1
        
        # 创建商户管理页面
        content = Div(
            # 使用统一的页面头部
            Div(
                H1("商户管理", cls="page-title"),
                cls="page-header"
            ),
            
            # 使用统一的页面内容布局
            Div(
                # 数据统计
                Div(
                H3("数据统计", cls="content-section-title"),
                Div(
                    Div(
                        Div("商户总数", cls="stat-title"),
                        Div(str(total_count), cls="stat-value text-primary"),
                        cls="stat"
                    ),
                    Div(
                        Div("当前筛选", cls="stat-title"),
                        Div(str(filtered_count), cls="stat-value text-secondary"),
                        cls="stat"
                    ),
                    Div(
                        Div("待审核", cls="stat-title"),
                        Div(str(status_counts.get('pending_approval', 0)), cls="stat-value text-warning"),
                        cls="stat"
                    ),
                    Div(
                        Div("已审核", cls="stat-title"),
                        Div(str(status_counts.get('approved', 0)), cls="stat-value text-success"),
                        cls="stat"
                    ),
                    cls="stats shadow mb-6"
                )
            ),
            
            # 搜索筛选工具栏
            Div(
                H3("搜索筛选", cls="text-xl font-semibold mb-4"),
                Form(
                    Div(
                        Div(
                            Label("状态筛选", cls="label"),
                            Select(
                                Option("待审核", value="pending_approval", selected=(status_filter == "pending_approval")),
                                Option("已审核", value="approved", selected=(status_filter == "approved")),
                                Option("已发布", value="published", selected=(status_filter == "published")),
                                Option("已过期", value="expired", selected=(status_filter == "expired")),
                                Option("全部状态", value="", selected=(status_filter == "" or status_filter == "all")),
                                name="status",
                                cls="select select-bordered w-full"
                            ),
                            cls="form-control"
                        ),
                        Div(
                            Label("商户搜索", cls="label"),
                            Input(
                                name="search",
                                placeholder="输入商户名称、联系方式或地区搜索...",
                                value=search_query,
                                cls="input input-bordered w-full"
                            ),
                            cls="form-control"
                        ),
                        Div(
                            Button("搜索筛选", type="submit", cls="btn btn-primary"),
                            Button("清除筛选", type="button", onclick="window.location.href='/merchants'", cls="btn btn-ghost ml-2"),
                            cls="form-control mt-4"
                        ),
                        cls="grid grid-cols-1 md:grid-cols-3 gap-4"
                    ),
                    method="GET",
                    action="/merchants",
                    cls="card bg-base-100 shadow-xl p-6 mb-6"
                )
            ),
            
            # 商户列表
            Div(
                H3("商户列表", cls="text-xl font-semibold mb-4"),
                Div(
                    Table(
                        Thead(
                            Tr(
                                Th("ID"),
                                Th("商户名称"),
                                Th("联系方式"),
                                Th("地区"),
                                Th("状态"),
                                Th("创建时间"),
                                Th("操作"),
                            )
                        ),
                        Tbody(
                            *[
                                Tr(
                                    Td(str(merchant.get('id', '-'))),
                                    Td(merchant.get('name', '-')),
                                    Td(merchant.get('contact_info', '-')),
                                    Td(f"{merchant.get('city_name', '-')} - {merchant.get('district_name', '-')}"),
                                    Td(
                                        Div(
                                            merchant.get('status', 'unknown'),
                                            cls=f"badge badge-{'success' if merchant.get('status') == 'approved' else 'warning' if merchant.get('status') == 'pending_approval' else 'info'}"
                                        )
                                    ),
                                    Td(merchant.get('created_at', '-')),
                                    Td(
                                        Div(
                                            A("查看", href=f"/posts/{merchant.get('id')}", cls="btn btn-sm btn-primary mr-2"),
                                            A("编辑", href=f"/posts/{merchant.get('id')}", cls="btn btn-sm btn-secondary"),
                                            cls="btn-group"
                                        )
                                    )
                                )
                                for merchant in merchants
                            ] if merchants else [
                                Tr(
                                    Td("暂无商户数据", colspan="7", cls="text-center text-gray-500")
                                )
                            ]
                        ),
                        cls="table table-zebra w-full"
                    ),
                    cls="overflow-x-auto"
                ),
                cls="card bg-base-100 shadow-xl p-6"
            ),
            cls="page-content"  # 关闭page-content div
            )
        )
        
        return create_layout("商户管理", content)
        
    except Exception as e:
        logger.error(f"商户管理页面错误: {e}")
        import traceback
        logger.error(f"完整堆栈: {traceback.format_exc()}")
        error_content = Div(
            H1("商户管理错误", cls="text-2xl font-bold text-red-600 mb-4"),
            Pre(f"{str(e)}\n\n{traceback.format_exc()}", cls="bg-gray-100 p-4 rounded text-sm")
        )
        return create_layout("系统错误", error_content)

# --- 用户管理模块V2 FastHTML 原生路由 ---

@app.get("/users")
@require_auth
async def users_list(request: Request):
    """用户管理页面"""
    try:
        # 获取查询参数
        params = request.query_params
        level_filter = params.get('level', '')
        search_query = params.get('search', '').strip()
        page = int(params.get('page', '1'))
        per_page = int(params.get('per_page', '20'))
        
        # 获取用户数据
        users = await user_manager.get_users_with_pagination(
            limit=per_page,
            offset=(page - 1) * per_page,
            level_filter=level_filter if level_filter else None,
            search=search_query if search_query else None
        )
        
        # 获取总用户数
        total_users = await user_manager.count_users(
            level_filter=level_filter if level_filter else None,
            search=search_query if search_query else None
        )
        
        # 获取统计数据
        stats = await user_manager.get_user_statistics()
        
        # 获取等级列表用于筛选
        levels = await incentive_manager.get_all_levels()
        
    except Exception as e:
        logger.error(f"获取用户数据失败: {e}")
        import traceback
        logger.error(f"完整堆栈: {traceback.format_exc()}")
        error_content = Div(
            H1("用户管理错误", cls="text-2xl font-bold text-red-600 mb-4"),
            Pre(f"{str(e)}\n\n{traceback.format_exc()}", cls="bg-gray-100 p-4 rounded text-sm")
        )
        return create_layout("系统错误", error_content)
    
    # 统计卡片
    stats_cards = Div(
        Div(
            Div("用户总数", cls="stat-title"),
            Div(str(stats.get('total_users', 0)), cls="stat-value text-primary"),
            cls="stat"
        ),
        Div(
            Div("本周活跃", cls="stat-title"),
            Div(str(stats.get('weekly_active', 0)), cls="stat-value text-success"),
            cls="stat"
        ),
        Div(
            Div("平均积分", cls="stat-title"),
            Div(f"{stats.get('avg_points', 0):.1f}", cls="stat-value text-warning"),
            cls="stat"
        ),
        Div(
            Div("高等级用户", cls="stat-title"),
            Div(str(stats.get('high_level_users', 0)), cls="stat-value text-info"),
            cls="stat"
        ),
        cls="stats shadow mb-6"
    )
    
    # 搜索筛选工具栏
    filter_form = Form(
        Div(
            Div(
                Label("等级筛选", cls="label"),
                Select(
                    Option("所有等级", value="", selected=(not level_filter)),
                    *[Option(level['level_name'], value=level['level_name'], 
                            selected=(level_filter == level['level_name'])) for level in levels],
                    name="level",
                    cls="select select-bordered w-full",
                    **{"data-test": "level-filter"}
                ),
                cls="form-control"
            ),
            Div(
                Label("用户搜索", cls="label"),
                Input(
                    name="search",
                    placeholder="输入用户名或用户ID搜索...",
                    value=search_query,
                    cls="input input-bordered w-full",
                    **{"data-test": "user-search-input"}
                ),
                cls="form-control"
            ),
            Div(
                Label("每页显示", cls="label"),
                Select(
                    Option("10条", value="10", selected=(per_page == 10)),
                    Option("20条", value="20", selected=(per_page == 20)),
                    Option("50条", value="50", selected=(per_page == 50)),
                    Option("100条", value="100", selected=(per_page == 100)),
                    name="per_page",
                    cls="select select-bordered w-full",
                    **{"data-test": "per-page-select"}
                ),
                cls="form-control"
            ),
            Div(
                Button("搜索筛选", type="submit", cls="btn btn-primary", **{"data-test": "apply-filter-btn"}),
                Button("清除筛选", type="button", onclick="window.location.href='/users'", cls="btn btn-ghost ml-2", **{"data-test": "clear-filter-btn"}),
                cls="form-control mt-4"
            ),
            cls="grid grid-cols-1 md:grid-cols-4 gap-4"
        ),
        method="GET",
        action="/users",
        cls="card bg-base-100 shadow-xl p-6 mb-6"
    )
    
    # 用户列表表格
    table_rows = []
    for user in users:
        import json
        badges_count = len(json.loads(user.get('badges', '[]'))) if user.get('badges') else 0
        
        row = Tr(
            Td(
                Div(
                    Strong(user.get('username', f"用户{user['user_id']}"), cls="font-medium text-sm"),
                    P(f"ID: {user['user_id']}", cls="text-xs text-gray-500 font-mono"),
                    cls="space-y-1"
                )
            ),
            Td(
                Span(user.get('level_name', '新手'), cls="badge badge-primary text-xs")
            ),
            Td(Strong(str(user.get('xp', 0)), cls="text-primary"), cls="text-center"),
            Td(Strong(str(user.get('points', 0)), cls="text-warning"), cls="text-center"),
            Td(Strong(str(user.get('order_count', 0)), cls="text-success"), cls="text-center"),
            Td(Span(f"🏆 {badges_count}", cls="text-sm text-info"), cls="text-center"),
            Td(
                Div(
                    A("👁️", href=f"/users/{user['user_id']}/detail", 
                      cls="btn btn-ghost btn-xs", title="查看详情", **{"data-test": f"user-detail-{user['user_id']}"}),
                    cls="flex gap-1"
                )
            ),
            cls="hover:bg-gray-50"
        )
        table_rows.append(row)
    
    # 分页计算
    total_pages = (total_users + per_page - 1) // per_page
    
    # 简单分页导航
    pagination_links = []
    if page > 1:
        prev_params = dict(params)
        prev_params['page'] = str(page - 1)
        prev_query = '&'.join([f"{k}={v}" for k, v in prev_params.items() if v])
        pagination_links.append(A("‹ 上一页", href=f"/users?{prev_query}", cls="btn btn-outline btn-sm"))
    
    pagination_links.append(Span(f"第 {page} 页，共 {total_pages} 页", cls="text-sm"))
    
    if page < total_pages:
        next_params = dict(params)
        next_params['page'] = str(page + 1)
        next_query = '&'.join([f"{k}={v}" for k, v in next_params.items() if v])
        pagination_links.append(A("下一页 ›", href=f"/users?{next_query}", cls="btn btn-outline btn-sm"))
    
    # 主表格
    users_table = Div(
        Table(
            Thead(
                Tr(
                    Th("用户"),
                    Th("等级"),
                    Th("经验值", cls="text-center"),
                    Th("积分", cls="text-center"),
                    Th("订单数", cls="text-center"),
                    Th("勋章", cls="text-center"),
                    Th("操作", cls="w-24")
                )
            ),
            Tbody(*table_rows if table_rows else [
                Tr(Td("暂无用户数据", colspan="7", cls="text-center text-gray-500"))
            ]),
            cls="table table-zebra w-full"
        ),
        cls="overflow-x-auto bg-white rounded-lg shadow"
    )
    
    # 工具栏：导出/分析
    current_query = request.url.query
    toolbar = Div(
        A("📋 导出数据", href=(f"/users/export?{current_query}" if current_query else "/users/export"), cls="btn btn-outline btn-sm", **{"data-test": "users-export-btn"}),
        A("📊 查看分析", href="/users/analytics", cls="btn btn-info btn-sm ml-2", **{"data-test": "users-analytics-btn"}),
        cls="mb-4"
    )

    content = Div(
        H1("用户管理", cls="page-title"),
        stats_cards,
        filter_form,
        toolbar,
        users_table,
        
        # 分页信息
        Div(
            Div(*pagination_links, cls="flex gap-2 items-center"),
            P(f"显示第 {(page-1)*per_page+1}-{min(page*per_page, total_users)} 条，共 {total_users} 个用户",
              cls="text-sm text-gray-500"),
            cls="flex justify-between items-center mt-6"
        )
    )
    
    return create_layout("用户管理", content)

# --- 用户分析（FastHTML 原生路由） ---

@app.get("/users/analytics")
@require_auth
async def users_analytics_dashboard(request: Request):
    """用户激励系统分析仪表板（FastHTML 原生）"""
    try:
        # 等级分布
        level_distribution = await user_manager.get_level_distribution()
        # 近30天活跃度
        from datetime import datetime, timedelta
        activity_dates = []
        activity_counts = []
        for i in range(30):
            date = datetime.now().date() - timedelta(days=i)
            activity_dates.append(date.strftime('%m-%d'))
            activity_counts.append(await user_manager.count_active_users_on_date(date.isoformat()))
        activity_dates.reverse(); activity_counts.reverse()
        # 热门勋章
        popular_badges = await user_manager.get_popular_badges(10)
        badge_names = [f"{b.get('badge_icon', '🏆')} {b['badge_name']}" for b in popular_badges]
        badge_counts = [b['user_count'] for b in popular_badges]
        # 积分分布
        points_ranges = ['0', '1-100', '101-500', '501-1000', '1001-5000', '5000+']
        points_counts = [
            await user_manager.count_users_by_points_range(0,0),
            await user_manager.count_users_by_points_range(1,100),
            await user_manager.count_users_by_points_range(101,500),
            await user_manager.count_users_by_points_range(501,1000),
            await user_manager.count_users_by_points_range(1001,5000),
            await user_manager.count_users_by_points_range(5001,None)
        ]
        # 评价活跃度（近7天）
        review_dates = []
        review_counts = []
        for i in range(7):
            d = datetime.now().date() - timedelta(days=i)
            review_dates.append(d.strftime('%m-%d'))
            review_counts.append(await review_manager.count_reviews(date_from=d.isoformat(), date_to=(d+timedelta(days=1)).isoformat()))
        review_dates.reverse(); review_counts.reverse()
        # 经验值分布
        xp_ranges = ['0', '1-50', '51-200', '201-500', '501-1000', '1000+']
        xp_counts = [
            await user_manager.count_users_by_xp_range(0,0),
            await user_manager.count_users_by_xp_range(1,50),
            await user_manager.count_users_by_xp_range(51,200),
            await user_manager.count_users_by_xp_range(201,500),
            await user_manager.count_users_by_xp_range(501,1000),
            await user_manager.count_users_by_xp_range(1001,None)
        ]
        
        data = {
            'level_names': level_distribution['names'],
            'level_counts': level_distribution['counts'],
            'activity_dates': activity_dates,
            'activity_counts': activity_counts,
            'badge_names': badge_names,
            'badge_counts': badge_counts,
            'points_ranges': points_ranges,
            'points_counts': points_counts,
            'review_activity_dates': review_dates,
            'review_activity_counts': review_counts,
            'xp_ranges': xp_ranges,
            'xp_counts': xp_counts
        }
    except Exception as e:
        logger.error(f"获取用户分析数据失败: {e}")
        error_content = Div(
            H1("用户数据分析错误", cls="text-2xl font-bold text-red-600 mb-4"),
            Pre(str(e), cls="bg-gray-100 p-4 rounded text-sm")
        )
        return create_layout("系统错误", error_content)

    charts = Div(
        Div(
            Div(H3("📊 用户等级分布", cls="text-xl font-semibold mb-4"), Canvas(id="levelDistributionChart", width="400", height="200"), cls="bg-white p-6 rounded-lg shadow"),
            Div(H3("📈 用户活跃度趋势 (近30天)", cls="text-xl font-semibold mb-4"), Canvas(id="userActivityChart", width="400", height="200"), cls="bg-white p-6 rounded-lg shadow"),
            cls="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6"
        ),
        Div(
            Div(H3("🏆 热门勋章排行 (Top 10)", cls="text-xl font-semibold mb-4"), Canvas(id="popularBadgesChart", width="400", height="300"), cls="bg-white p-6 rounded-lg shadow"),
            Div(H3("💰 用户积分分布", cls="text-xl font-semibold mb-4"), Canvas(id="pointsDistributionChart", width="400", height="300"), cls="bg-white p-6 rounded-lg shadow"),
            cls="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6"
        ),
        Div(
            Div(H3("⭐ 评价活跃度统计", cls="text-xl font-semibold mb-4"), Canvas(id="reviewActivityChart", width="400", height="250"), cls="bg-white p-6 rounded-lg shadow"),
            Div(H3("📈 用户成长轨迹 (经验值分布)", cls="text-xl font-semibold mb-4"), Canvas(id="userGrowthChart", width="400", height="250"), cls="bg-white p-6 rounded-lg shadow"),
            cls="grid grid-cols-1 lg:grid-cols-2 gap-6"
        )
    )

    import json as _json
    chartjs = Script(src="https://cdn.jsdelivr.net/npm/chart.js")
    init_script = Script(f"""
    const data = {_json.dumps(data)};
    const doughnut = (ctx, labels, values, colors) => new Chart(ctx, {{type:'doughnut', data:{{labels:labels, datasets:[{{data:values, backgroundColor:colors, borderWidth:2, borderColor:'#fff'}}]}}, options:{{responsive:true,plugins:{{legend:{{position:'right'}}}}}}}});
    const line = (ctx, labels, values) => new Chart(ctx, {{type:'line', data:{{labels:labels, datasets:[{{label:'活跃用户数', data:values, borderColor:'#3b82f6', backgroundColor:'rgba(59,130,246,0.1)', tension:0.1, fill:true}}]}}, options:{{responsive:true,plugins:{{legend:{{display:false}}}}}}}});
    const bar = (ctx, labels, values, color) => new Chart(ctx, {{type:'bar', data:{{labels:labels, datasets:[{{label:'数量', data:values, backgroundColor:color, borderColor:color.replace('0.8','1'), borderWidth:1}}]}}, options:{{responsive:true,plugins:{{legend:{{display:false}}}},scales:{{y:{{beginAtZero:true}}}}}}}});
    doughnut(document.getElementById('levelDistributionChart'), data.level_names, data.level_counts, ['#3b82f6','#10b981','#f59e0b','#ef4444','#8b5cf6','#06b6d4']);
    line(document.getElementById('userActivityChart'), data.activity_dates, data.activity_counts);
    bar(document.getElementById('popularBadgesChart'), data.badge_names, data.badge_counts, 'rgba(245,158,11,0.8)');
    bar(document.getElementById('pointsDistributionChart'), data.points_ranges, data.points_counts, 'rgba(16,185,129,0.8)');
    bar(document.getElementById('reviewActivityChart'), data.review_activity_dates, data.review_activity_counts, 'rgba(139,92,246,0.8)');
    bar(document.getElementById('userGrowthChart'), data.xp_ranges, data.xp_counts, 'rgba(236,72,153,0.8)');
    """)

    content = Div(
        H1("用户激励系统数据分析", cls="page-title"),
        Div(
            A("← 返回用户列表", href="/users", cls="btn btn-outline mb-6"),
            A("⚙️ 等级配置", href="/incentives", cls="btn btn-secondary mb-6 ml-2"),
        ),
        charts,
        chartjs,
        init_script
    )
    return create_layout("用户数据分析", content)

@app.get("/users/analytics-data")
@require_auth
async def users_analytics_data_api(request: Request):
    """返回用户分析数据JSON（如需前端轮询）"""
    import json as _json
    try:
        # 简化实现：复用仪表板逻辑再次查询（也可接入缓存）
        from datetime import datetime, timedelta
        level_distribution = await user_manager.get_level_distribution()
        activity_dates=[]; activity_counts=[]
        for i in range(30):
            d = datetime.now().date() - timedelta(days=i)
            activity_dates.append(d.strftime('%m-%d'))
            activity_counts.append(await user_manager.count_active_users_on_date(d.isoformat()))
        activity_dates.reverse(); activity_counts.reverse()
        popular_badges = await user_manager.get_popular_badges(10)
        badge_names = [f"{b.get('badge_icon', '🏆')} {b['badge_name']}" for b in popular_badges]
        badge_counts = [b['user_count'] for b in popular_badges]
        points_ranges=['0','1-100','101-500','501-1000','1001-5000','5000+']
        points_counts=[
            await user_manager.count_users_by_points_range(0,0),
            await user_manager.count_users_by_points_range(1,100),
            await user_manager.count_users_by_points_range(101,500),
            await user_manager.count_users_by_points_range(501,1000),
            await user_manager.count_users_by_points_range(1001,5000),
            await user_manager.count_users_by_points_range(5001,None)
        ]
        review_dates=[]; review_counts=[]
        for i in range(7):
            d = datetime.now().date() - timedelta(days=i)
            review_dates.append(d.strftime('%m-%d'))
            review_counts.append(await review_manager.count_reviews(date_from=d.isoformat(), date_to=(d+timedelta(days=1)).isoformat()))
        review_dates.reverse(); review_counts.reverse()
        xp_ranges=['0','1-50','51-200','201-500','501-1000','1000+']
        xp_counts=[
            await user_manager.count_users_by_xp_range(0,0),
            await user_manager.count_users_by_xp_range(1,50),
            await user_manager.count_users_by_xp_range(51,200),
            await user_manager.count_users_by_xp_range(201,500),
            await user_manager.count_users_by_xp_range(501,1000),
            await user_manager.count_users_by_xp_range(1001,None)
        ]
        payload = {
            'level_names': level_distribution['names'],
            'level_counts': level_distribution['counts'],
            'activity_dates': activity_dates,
            'activity_counts': activity_counts,
            'badge_names': badge_names,
            'badge_counts': badge_counts,
            'points_ranges': points_ranges,
            'points_counts': points_counts,
            'review_activity_dates': review_dates,
            'review_activity_counts': review_counts,
            'xp_ranges': xp_ranges,
            'xp_counts': xp_counts
        }
        from starlette.responses import Response as _Resp
        return _Resp(content=_json.dumps(payload, ensure_ascii=False), media_type="application/json")
    except Exception as e:
        logger.error(f"用户分析数据API失败: {e}")
        from starlette.responses import Response as _Resp
        return _Resp(content=_json.dumps({"error":"获取数据失败"}, ensure_ascii=False), status_code=500, media_type="application/json")

@app.get("/users/{user_id}/detail")
@require_auth
async def user_detail(request: Request):
    """用户详情页面"""
    user_id = int(request.path_params['user_id'])
    
    try:
        # 获取用户详细信息
        user_info = await user_manager.get_user_with_details(user_id)
        if not user_info:
            error_content = Div(
                H2("用户不存在", cls="text-2xl font-bold text-red-600 mb-4"),
                P("您查找的用户不存在。"),
                A("返回用户列表", href="/users", cls="btn btn-primary mt-4")
            )
            return create_layout("用户不存在", error_content)
        
    except Exception as e:
        logger.error(f"获取用户详情失败: {e}")
        import traceback
        logger.error(f"完整堆栈: {traceback.format_exc()}")
        error_content = Div(
            H1("用户详情错误", cls="text-2xl font-bold text-red-600 mb-4"),
            Pre(f"{str(e)}\n\n{traceback.format_exc()}", cls="bg-gray-100 p-4 rounded text-sm")
        )
        return create_layout("系统错误", error_content)
    
    import json
    badges = json.loads(user_info.get('badges', '[]')) if user_info.get('badges') else []
    
    # 用户基本信息卡片
    user_info_card = Div(
        H3("👤 基本信息", cls="text-xl font-semibold mb-4"),
        Div(
            Div(f"用户ID: {user_info['user_id']}", cls="font-mono text-lg mb-2"),
            Div(f"用户名: {user_info.get('username', '未设置')}", cls="mb-2"),
            Div(f"当前等级: {user_info.get('level_name', '新手')}", cls="badge badge-primary badge-lg mb-2"),
            Div(f"经验值: {user_info.get('xp', 0)} XP", cls="text-primary font-bold mb-2"),
            Div(f"积分: {user_info.get('points', 0)} 分", cls="text-warning font-bold mb-2"),
            Div(f"完成订单: {user_info.get('total_orders', 0)} 次", cls="text-success font-bold mb-2"),
            Div(f"发表评价: {user_info.get('total_reviews', 0)} 次", cls="text-info font-bold mb-2"),
            cls="space-y-3"
        ),
        cls="bg-white p-6 rounded-lg shadow"
    )
    
    # 勋章展示卡片
    badge_items = []
    for badge in badges:
        badge_item = Div(
            Div(
                Span("🏆", cls="text-2xl"),
                P(badge, cls="font-medium text-sm"),
                cls="text-center space-y-1"
            ),
            cls="bg-gray-50 p-3 rounded-lg"
        )
        badge_items.append(badge_item)
    
    badges_card = Div(
        H3("🏆 获得勋章", cls="text-xl font-semibold mb-4"),
        Div(
            *badge_items if badge_items else [P("暂无勋章", cls="text-gray-500 text-center py-8")],
            cls="grid grid-cols-2 md:grid-cols-3 gap-3"
        ),
        cls="bg-white p-6 rounded-lg shadow"
    )
    
    content = Div(
        H1(f"用户详情 - {user_info.get('username', f'用户{user_id}')}", cls="page-title"),
        
        Div(
            # 左侧
            user_info_card,
            # 右侧
            badges_card,
            cls="grid grid-cols-1 lg:grid-cols-2 gap-8"
        ),
        
        # 返回按钮
        Div(
            A("← 返回用户列表", href="/users", cls="btn btn-outline"),
            cls="mt-8"
        )
    )
    
    return create_layout("用户详情", content)

@app.get("/users/export")
@require_auth
async def users_export(request: Request):
    """导出用户数据为CSV"""
    try:
        # 获取筛选参数
        params = request.query_params
        level_filter = params.get("level") if params.get("level") else None
        search_query = params.get("search") if params.get("search") else None
        
        users = await user_manager.get_users_with_pagination(
            limit=10000,  # 导出限制
            level_filter=level_filter,
            search=search_query
        )
        
        # 创建CSV内容
        import csv
        import io
        from datetime import datetime
        
        output = io.StringIO()
        writer = csv.writer(output)
        
        # 写入表头
        writer.writerow([
            '用户ID', '用户名', '等级', '经验值', '积分', '订单数', '勋章数', '注册时间'
        ])
        
        # 写入数据
        import json
        for user in users:
            badges_count = len(json.loads(user.get('badges', '[]'))) if user.get('badges') else 0
            writer.writerow([
                user['user_id'],
                user.get('username', ''),
                user.get('level_name', '新手'),
                user.get('xp', 0),
                user.get('points', 0),
                user.get('order_count', 0),
                badges_count,
                user.get('created_at', '')
            ])
        
        # 准备响应
        output.seek(0)
        filename = f"users_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        from starlette.responses import StreamingResponse
        
        def generate():
            yield output.getvalue().encode('utf-8-sig')  # BOM for Excel
        
        return StreamingResponse(
            generate(),
            media_type="text/csv",
            headers={"Content-Disposition": f"attachment; filename={filename}"}
        )
        
    except Exception as e:
        logger.error(f"导出用户数据失败: {e}")
        error_content = Div(
            H1("导出失败", cls="text-2xl font-bold text-red-600 mb-4"),
            P(f"导出用户数据时发生错误: {str(e)}"),
            A("返回用户管理", href="/users", cls="btn btn-primary mt-4")
        )
        return create_layout("导出失败", error_content)

# --- 评价管理模块V2 FastHTML 原生路由 ---

@app.get("/reviews")
@require_auth
async def reviews_list(request: Request):
    """评价管理页面"""
    try:
        # 获取查询参数
        params = request.query_params
        status_filter = params.get('status', '')
        confirmed_filter = params.get('confirmed', '')
        search_query = params.get('search', '').strip()
        page = int(params.get('page', '1'))
        per_page = int(params.get('per_page', '20'))
        date_from = params.get('date_from', '')
        date_to = params.get('date_to', '')
        
        # 构建查询参数
        query_params = {
            'status': status_filter if status_filter else None,
            'is_confirmed': confirmed_filter == 'true' if confirmed_filter else None,
            'date_from': date_from if date_from else None,
            'date_to': date_to if date_to else None,
            'limit': per_page,
            'offset': (page - 1) * per_page
        }
        
        # 获取评价数据
        reviews = await review_manager.get_reviews_with_details(**query_params)
        
        # 获取总数用于分页
        total_reviews = await review_manager.count_reviews(
            status=query_params['status'],
            is_confirmed=query_params['is_confirmed'],
            date_from=query_params['date_from'],
            date_to=query_params['date_to']
        )
        
        # 获取统计数据
        total_count = await review_manager.count_reviews()
        confirmed_count = await review_manager.count_reviews(is_confirmed=True)
        pending_count = await review_manager.count_reviews(is_confirmed=False)
        avg_rating = await review_manager.get_average_rating()
        
        # 获取商户列表用于筛选
        merchants = await merchant_manager.get_merchants(limit=100)
        
    except Exception as e:
        logger.error(f"获取评价数据失败: {e}")
        import traceback
        logger.error(f"完整堆栈: {traceback.format_exc()}")
        error_content = Div(
            H1("评价管理错误", cls="text-2xl font-bold text-red-600 mb-4"),
            Pre(f"{str(e)}\n\n{traceback.format_exc()}", cls="bg-gray-100 p-4 rounded text-sm")
        )
        return create_layout("系统错误", error_content)
    
    # 统计卡片
    stats_cards = Div(
        Div(
            Div("评价总数", cls="stat-title"),
            Div(str(total_count), cls="stat-value text-primary"),
            cls="stat"
        ),
        Div(
            Div("有效评价", cls="stat-title"),
            Div(str(confirmed_count), cls="stat-value text-success"),
            cls="stat"
        ),
        Div(
            Div("待确认", cls="stat-title"),
            Div(str(pending_count), cls="stat-value text-warning"),
            cls="stat"
        ),
        Div(
            Div("平均评分", cls="stat-title"),
            Div(f"{avg_rating:.1f}", cls="stat-value text-info"),
            cls="stat"
        ),
        cls="stats shadow mb-6"
    )
    
    # 搜索筛选工具栏
    filter_form = Form(
        Div(
            Div(
                Label("评价状态", cls="label"),
                Select(
                    Option("全部状态", value="", selected=(not status_filter)),
                    Option("待商户确认", value="pending_merchant_confirmation", selected=(status_filter == "pending_merchant_confirmation")),
                    Option("已完成", value="completed", selected=(status_filter == "completed")),
                    name="status",
                    cls="select select-bordered w-full"
                ),
                cls="form-control"
            ),
            Div(
                Label("确认状态", cls="label"),
                Select(
                    Option("全部", value="", selected=(not confirmed_filter)),
                    Option("已确认", value="true", selected=(confirmed_filter == "true")),
                    Option("未确认", value="false", selected=(confirmed_filter == "false")),
                    name="confirmed",
                    cls="select select-bordered w-full"
                ),
                cls="form-control"
            ),
            Div(
                Label("开始日期", cls="label"),
                Input(
                    name="date_from",
                    type="date",
                    value=date_from,
                    cls="input input-bordered w-full"
                ),
                cls="form-control"
            ),
            Div(
                Label("结束日期", cls="label"),
                Input(
                    name="date_to",
                    type="date",
                    value=date_to,
                    cls="input input-bordered w-full"
                ),
                cls="form-control"
            ),
            Div(
                Label("每页显示", cls="label"),
                Select(
                    Option("10条", value="10", selected=(per_page == 10)),
                    Option("20条", value="20", selected=(per_page == 20)),
                    Option("50条", value="50", selected=(per_page == 50)),
                    name="per_page",
                    cls="select select-bordered w-full"
                ),
                cls="form-control"
            ),
            Div(
                Button("搜索筛选", type="submit", cls="btn btn-primary", **{"data-test": "apply-review-filter"}),
                Button("清除筛选", type="button", onclick="window.location.href='/reviews'", cls="btn btn-ghost ml-2", **{"data-test": "clear-review-filter"}),
                A("导出数据", href=f"/reviews/export?{request.url.query}" if request.url.query else "/reviews/export", cls="btn btn-outline ml-2", **{"data-test": "reviews-export-btn"}),
                cls="form-control mt-4"
            ),
            cls="grid grid-cols-1 md:grid-cols-6 gap-4"
        ),
        method="GET",
        action="/reviews",
        cls="card bg-base-100 shadow-xl p-6 mb-6"
    )
    
    # 评价列表表格
    table_rows = []
    for review in reviews:
        # 计算平均评分
        ratings = [
            review.get('rating_appearance', 0),
            review.get('rating_figure', 0), 
            review.get('rating_service', 0),
            review.get('rating_attitude', 0),
            review.get('rating_environment', 0)
        ]
        avg_rating_single = sum(r for r in ratings if r > 0) / len([r for r in ratings if r > 0]) if any(r > 0 for r in ratings) else 0
        
        row = Tr(
            Td(
                Div(
                    Strong(f"#{review['id']}", cls="font-mono text-sm"),
                    P(f"订单: {review['order_id']}", cls="text-xs text-gray-500"),
                    cls="space-y-1"
                )
            ),
            Td(
                Div(
                    P(review.get('customer_username', f"用户{review['customer_user_id']}"), cls="font-medium text-sm"),
                    P(f"ID: {review['customer_user_id']}", cls="text-xs text-gray-500"),
                    cls="space-y-1"
                )
            ),
            Td(
                Div(
                    P(review.get('merchant_name', '未知商户'), cls="font-medium text-sm"),
                    P(f"ID: {review['merchant_id']}", cls="text-xs text-gray-500"),
                    cls="space-y-1"
                )
            ),
            Td(
                Div(
                    Strong(f"{avg_rating_single:.1f}/10", cls="text-primary"),
                    P("平均分", cls="text-xs text-gray-500"),
                    cls="text-center space-y-1"
                )
            ),
            Td(
                Span(
                    review['status'], 
                    cls=f"badge badge-{'success' if review['status'] == 'completed' else 'warning'}"
                )
            ),
            Td(
                Span(
                    "✅ 已确认" if review.get('is_confirmed_by_merchant') else "⏳ 待确认",
                    cls="text-xs " + ("text-success" if review.get('is_confirmed_by_merchant') else "text-warning")
                )
            ),
            Td(
                review['created_at'][:16] if review.get('created_at') else '-'
            ),
            Td(
                Div(
                    A("👁️", href=f"/reviews/{review['id']}/detail", 
                      cls="btn btn-ghost btn-xs", title="查看详情"),
                    A("✏️", href=f"/reviews/{review['id']}/manage", 
                      cls="btn btn-ghost btn-xs", title="管理评价"),
                    cls="flex gap-1"
                )
            ),
            cls="hover:bg-gray-50"
        )
        table_rows.append(row)
    
    # 分页计算
    total_pages = (total_reviews + per_page - 1) // per_page
    
    # 分页导航
    pagination_links = []
    if page > 1:
        prev_params = dict(params)
        prev_params['page'] = str(page - 1)
        prev_query = '&'.join([f"{k}={v}" for k, v in prev_params.items() if v])
        pagination_links.append(A("‹ 上一页", href=f"/reviews?{prev_query}", cls="btn btn-outline btn-sm"))
    
    pagination_links.append(Span(f"第 {page} 页，共 {total_pages} 页", cls="text-sm"))
    
    if page < total_pages:
        next_params = dict(params)
        next_params['page'] = str(page + 1)
        next_query = '&'.join([f"{k}={v}" for k, v in next_params.items() if v])
        pagination_links.append(A("下一页 ›", href=f"/reviews?{next_query}", cls="btn btn-outline btn-sm"))
    
    # 主表格
    reviews_table = Div(
        Table(
            Thead(
                Tr(
                    Th("评价ID"),
                    Th("用户"),
                    Th("商户"),
                    Th("评分", cls="text-center"),
                    Th("状态"),
                    Th("确认", cls="text-center"),
                    Th("时间"),
                    Th("操作", cls="w-24")
                )
            ),
            Tbody(*table_rows if table_rows else [
                Tr(Td("暂无评价数据", colspan="8", cls="text-center text-gray-500"))
            ]),
            cls="table table-zebra w-full"
        ),
        cls="overflow-x-auto bg-white rounded-lg shadow"
    )
    
    content = Div(
        H1("评价管理", cls="page-title"),
        stats_cards,
        filter_form,
        reviews_table,
        
        # 分页信息
        Div(
            Div(*pagination_links, cls="flex gap-2 items-center"),
            P(f"显示第 {(page-1)*per_page+1}-{min(page*per_page, total_reviews)} 条，共 {total_reviews} 条评价",
              cls="text-sm text-gray-500"),
            cls="flex justify-between items-center mt-6"
        )
    )
    
    return create_layout("评价管理", content)

@app.get("/reviews/{review_id}/detail")
@require_auth
async def review_detail(request: Request):
    """评价详情页面"""
    review_id = int(request.path_params['review_id'])
    
    try:
        # 获取评价详细信息
        review = await review_manager.get_review_detail(review_id)
        if not review:
            error_content = Div(
                H2("评价不存在", cls="text-2xl font-bold text-red-600 mb-4"),
                P("您查找的评价不存在。"),
                A("返回评价列表", href="/reviews", cls="btn btn-primary mt-4")
            )
            return create_layout("评价不存在", error_content)
        
    except Exception as e:
        logger.error(f"获取评价详情失败: {e}")
        import traceback
        logger.error(f"完整堆栈: {traceback.format_exc()}")
        error_content = Div(
            H1("评价详情错误", cls="text-2xl font-bold text-red-600 mb-4"),
            Pre(f"{str(e)}\n\n{traceback.format_exc()}", cls="bg-gray-100 p-4 rounded text-sm")
        )
        return create_layout("系统错误", error_content)
    
    # 评价基本信息卡片
    review_info_card = Div(
        H3("📋 评价信息", cls="text-xl font-semibold mb-4"),
        Div(
            Div(f"评价ID: #{review['id']}", cls="font-mono text-lg mb-2"),
            Div(f"订单ID: #{review['order_id']}", cls="font-mono mb-2"),
            Div(f"状态: {review['status']}", cls=f"badge badge-{'success' if review['status'] == 'completed' else 'warning'} badge-lg mb-2"),
            Div(f"确认状态: {'✅ 已确认' if review.get('is_confirmed_by_merchant') else '⏳ 待确认'}", 
                cls=f"{'text-success' if review.get('is_confirmed_by_merchant') else 'text-warning'} mb-2"),
            Div(f"评价时间: {review['created_at']}", cls="text-sm text-gray-500"),
            cls="space-y-3"
        ),
        cls="bg-white p-6 rounded-lg shadow"
    )
    
    # 五维评分卡片
    rating_items = [
        ('颜值评分', review.get('rating_appearance', 0), '💄'),
        ('身材评分', review.get('rating_figure', 0), '👗'),
        ('服务评分', review.get('rating_service', 0), '🛎️'),
        ('态度评分', review.get('rating_attitude', 0), '😊'),
        ('环境评分', review.get('rating_environment', 0), '🏠')
    ]
    
    rating_cards = []
    for name, score, icon in rating_items:
        card = Div(
            Div(
                Span(icon, cls="text-2xl"),
                P(name, cls="text-sm font-medium"),
                Strong(f"{score}/10", cls="text-lg text-primary"),
                cls="text-center space-y-1"
            ),
            cls="bg-gray-50 p-4 rounded-lg"
        )
        rating_cards.append(card)
    
    ratings_card = Div(
        H3("⭐ 五维评分", cls="text-xl font-semibold mb-4"),
        Div(*rating_cards, cls="grid grid-cols-2 md:grid-cols-5 gap-3"),
        cls="bg-white p-6 rounded-lg shadow"
    )
    
    # 文字评价卡片
    text_review_card = Div(
        H3("📝 文字评价", cls="text-xl font-semibold mb-4"),
        Div(
            P(review.get('text_review_by_user', '暂无文字评价'), 
              cls="text-gray-700 leading-relaxed" if review.get('text_review_by_user') else "text-gray-500 italic"),
            cls="bg-gray-50 p-4 rounded-lg"
        ),
        cls="bg-white p-6 rounded-lg shadow"
    )
    
    # 用户信息卡片
    user_info_card = Div(
        H3("👤 评价用户", cls="text-xl font-semibold mb-4"),
        Div(
            P(f"用户ID: {review['customer_user_id']}", cls="font-mono mb-2"),
            P(f"用户名: {review.get('customer_username', '未设置')}", cls="mb-2"),
            A("查看用户详情", href=f"/users/{review['customer_user_id']}/detail", 
              cls="btn btn-outline btn-sm"),
            cls="space-y-2"
        ),
        cls="bg-white p-6 rounded-lg shadow"
    )
    
    # 商户信息卡片
    merchant_info_card = Div(
        H3("🏪 被评价商户", cls="text-xl font-semibold mb-4"),
        Div(
            P(f"商户: {review.get('merchant_name', '未知商户')}", cls="font-medium mb-2"),
            P(f"商户ID: {review['merchant_id']}", cls="font-mono text-sm mb-2"),
            A("查看商户详情", href=f"/posts/{review['merchant_id']}", 
              cls="btn btn-outline btn-sm"),
            cls="space-y-2"
        ),
        cls="bg-white p-6 rounded-lg shadow"
    )
    
    # 生成CSRF Token
    csrf_token = get_or_create_csrf_token(request)

    # 管理操作卡片（如果评价未确认）
    management_card = None
    if not review.get('is_confirmed_by_merchant'):
        management_card = Div(
            H3("⚙️ 管理操作", cls="text-xl font-semibold mb-4"),
            Div(
                P("该评价还未被商户确认，管理员可以进行以下操作：", cls="text-sm text-gray-600 mb-4"),
                Form(
                    Input(type="hidden", name="csrf_token", value=csrf_token),
                    Button("✅ 代为确认评价", type="submit", cls="btn btn-success", **{"data-test": "confirm-review-btn"}),
                    method="post",
                    action=f"/reviews/{review_id}/confirm"
                ),
                cls="space-y-3"
            ),
            cls="bg-yellow-50 border border-yellow-200 p-6 rounded-lg"
        )
    
    content = Div(
        H1(f"评价详情 - #{review['id']}", cls="page-title"),
        
        Div(
            # 左侧
            Div(
                review_info_card,
                ratings_card,
                text_review_card,
                *([management_card] if management_card else []),
                cls="space-y-6"
            ),
            
            # 右侧
            Div(
                user_info_card,
                merchant_info_card,
                cls="space-y-6"
            ),
            
            cls="grid grid-cols-1 lg:grid-cols-2 gap-8"
        ),
        
        # 返回按钮
        Div(
            A("← 返回评价列表", href="/reviews", cls="btn btn-outline"),
            cls="mt-8"
        )
    )
    
    return create_layout("评价详情", content)

@app.post("/reviews/{review_id}/confirm")
@require_auth
async def confirm_review_route(request: Request):
    """管理员代为确认评价"""
    review_id = int(request.path_params['review_id'])
    
    try:
        form = await request.form()
        if not validate_csrf(request, form.get('csrf_token', '')):
            return RedirectResponse(url=f"/reviews/{review_id}/detail?error=csrf", status_code=302)
        success = await review_manager.confirm_review(review_id)
        if success:
            return RedirectResponse(url=f"/reviews/{review_id}/detail?confirmed=1", status_code=302)
        else:
            return RedirectResponse(url=f"/reviews/{review_id}/detail?error=confirm_failed", status_code=302)
    except Exception as e:
        logger.error(f"确认评价失败: {e}")
        return RedirectResponse(url=f"/reviews/{review_id}/detail?error=system_error", status_code=302)

@app.get("/reviews/{review_id}/manage")
@require_auth
async def review_manage(request: Request):
    """评价管理页面（预留功能）"""
    review_id = int(request.path_params['review_id'])
    
    try:
        review = await review_manager.get_review_detail(review_id)
        if not review:
            error_content = Div(
                H2("评价不存在", cls="text-2xl font-bold text-red-600 mb-4"),
                P("您查找的评价不存在。"),
                A("返回评价列表", href="/reviews", cls="btn btn-primary mt-4")
            )
            return create_layout("评价不存在", error_content)
        
    except Exception as e:
        logger.error(f"获取评价管理页面失败: {e}")
        return RedirectResponse(url=f"/reviews/{review_id}/detail", status_code=302)
    
    content = Div(
        H1(f"管理评价 - #{review['id']}", cls="page-title"),
        
        # 管理功能卡片
        Div(
            H3("🛠️ 可用操作", cls="text-xl font-semibold mb-4"),
            Div(
                A("查看详情", href=f"/reviews/{review_id}/detail", cls="btn btn-primary mr-2"),
                *([Form(
                    Input(type="hidden", name="csrf_token", value=get_or_create_csrf_token(request)),
                    Button("确认评价", type="submit", cls="btn btn-success mr-2", **{"data-test": "confirm-review-inline-btn"}),
                    method="post",
                    action=f"/reviews/{review_id}/confirm",
                    cls="inline-block"
                )] if not review.get('is_confirmed_by_merchant') else []),
                A("返回列表", href="/reviews", cls="btn btn-outline"),
                cls="flex gap-2"
            ),
            cls="bg-white p-6 rounded-lg shadow"
        )
    )
    
    return create_layout("评价管理", content)

@app.get("/reviews/export")
@require_auth
async def reviews_export(request: Request):
    """导出评价数据为CSV"""
    try:
        # 获取筛选参数
        params = request.query_params
        query_params = {
            'status': params.get('status') if params.get('status') else None,
            'is_confirmed': params.get('confirmed') == 'true' if params.get('confirmed') else None,
            'date_from': params.get('date_from') if params.get('date_from') else None,
            'date_to': params.get('date_to') if params.get('date_to') else None,
            'limit': 10000  # 导出限制
        }
        
        reviews = await review_manager.get_reviews_with_details(**query_params)
        
        # 创建CSV内容
        import csv
        import io
        from datetime import datetime
        
        output = io.StringIO()
        writer = csv.writer(output)
        
        # 写入表头
        writer.writerow([
            '评价ID', '订单ID', '用户ID', '用户名', '商户ID', '商户名',
            '颜值评分', '身材评分', '服务评分', '态度评分', '环境评分',
            '文字评价', '状态', '商户确认', '评价时间'
        ])
        
        # 写入数据
        for review in reviews:
            writer.writerow([
                review['id'],
                review['order_id'],
                review['customer_user_id'],
                review.get('customer_username', ''),
                review['merchant_id'],
                review.get('merchant_name', ''),
                review.get('rating_appearance', ''),
                review.get('rating_figure', ''),
                review.get('rating_service', ''),
                review.get('rating_attitude', ''),
                review.get('rating_environment', ''),
                review.get('text_review_by_user', ''),
                review['status'],
                '是' if review.get('is_confirmed_by_merchant') else '否',
                review['created_at']
            ])
        
        # 准备响应
        output.seek(0)
        filename = f"reviews_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        from starlette.responses import StreamingResponse
        
        def generate():
            yield output.getvalue().encode('utf-8-sig')  # BOM for Excel
        
        return StreamingResponse(
            generate(),
            media_type="text/csv",
            headers={"Content-Disposition": f"attachment; filename={filename}"}
        )
        
    except Exception as e:
        logger.error(f"导出评价数据失败: {e}")
        error_content = Div(
            H1("导出失败", cls="text-2xl font-bold text-red-600 mb-4"),
            P(f"导出评价数据时发生错误: {str(e)}"),
            A("返回评价管理", href="/reviews", cls="btn btn-primary mt-4")
        )
        return create_layout("导出失败", error_content)


# ================================== 绑定码管理模块V2 ==================================

@app.get("/binding-codes")
@require_auth
async def binding_codes_list(request: Request):
    """绑定码列表页面"""
    try:
        # 获取查询参数
        include_used = request.query_params.get("include_used", "true").lower() == "true"
        include_expired = request.query_params.get("include_expired", "false").lower() == "true"
        page = int(request.query_params.get("page", "1"))
        limit = 20  # 每页显示20条
        offset = (page - 1) * limit
        
        # 获取绑定码数据
        binding_data = await binding_codes_manager.get_all_binding_codes(
            include_used=include_used,
            include_expired=include_expired,
            limit=limit if page == 1 else None  # 首页限制，后续加载更多
        )
        
        codes = binding_data.get("codes", [])
        total = binding_data.get("total", 0)
        
        # 获取统计信息
        stats = await binding_codes_manager.get_binding_code_statistics()
        
        # 分页处理
        displayed_codes = codes[offset:offset+limit] if page > 1 else codes[:limit]
        has_more = len(codes) > offset + limit or binding_data.get("has_more", False)
        
        # 构建表格行
        table_rows = []
        for code in displayed_codes:
            status_badge = Span(
                "已使用" if code.get('is_used') else "未使用",
                cls="badge badge-success" if code.get('is_used') else "badge badge-warning"
            )
            
            merchant_info = "未绑定"
            if code.get('merchant_name'):
                merchant_info = f"{code.get('merchant_name')} (ID: {code.get('merchant_id')})"
            
            expires_info = "永久有效"
            if code.get('expires_at'):
                expires_info = code.get('expires_at')
            
            actions = Div(
                A("详情", href=f"/binding-codes/{code['id']}/detail", 
                  cls="btn btn-xs btn-info mr-1"),
                Button("删除", onclick=f"confirmDeleteCode({code['id']})", 
                       cls="btn btn-xs btn-error mr-1"),
                cls="flex gap-1"
            )
            
            table_rows.append(
                Tr(
                    Td(code['code'], cls="font-mono"),
                    Td(status_badge),
                    Td(merchant_info),
                    Td(code.get('created_at', '')),
                    Td(expires_info),
                    Td(code.get('used_at', '') or '-'),
                    Td(actions)
                )
            )
        
        # 过滤器表单
        filter_form = Form(
            Div(
                Div(
                    Label("显示选项:", cls="label label-text font-semibold"),
                    Div(
                        Label(
                            Input(type="checkbox", name="include_used", value="true",
                                  checked=include_used, cls="checkbox"),
                            Span("包含已使用", cls="label-text ml-2"),
                            cls="cursor-pointer flex items-center"
                        ),
                        Label(
                            Input(type="checkbox", name="include_expired", value="true",
                                  checked=include_expired, cls="checkbox"),
                            Span("包含已过期", cls="label-text ml-2"),
                            cls="cursor-pointer flex items-center"
                        ),
                        cls="flex gap-4"
                    ),
                    cls="form-control"
                ),
                Button("筛选", type="submit", cls="btn btn-primary"),
                cls="flex items-end gap-4"
            ),
            method="GET",
            cls="bg-base-200 p-4 rounded mb-6"
        )
        
        # 统计卡片
        stats_cards = Div(
            Div(
                Div(
                    Div(
                        H3(str(stats.get('total_codes', 0)), cls="text-2xl font-bold"),
                        P("总绑定码", cls="text-sm opacity-60"),
                        cls="stat"
                    ),
                    Div(
                        H3(str(stats.get('valid_codes', 0)), cls="text-2xl font-bold text-success"),
                        P("未使用", cls="text-sm opacity-60"),
                        cls="stat"
                    ),
                    Div(
                        H3(str(stats.get('used_codes', 0)), cls="text-2xl font-bold text-warning"),
                        P("已使用", cls="text-sm opacity-60"),
                        cls="stat"
                    ),
                    Div(
                        H3(f"{stats.get('usage_rate', 0):.1f}%", cls="text-2xl font-bold text-info"),
                        P("使用率", cls="text-sm opacity-60"),
                        cls="stat"
                    ),
                    cls="stats shadow w-full"
                ),
                cls="mb-6"
            ),
        )
        
        # 主表格
        table = Div(
            Table(
                Thead(
                    Tr(
                        Th("绑定码", cls="w-32"),
                        Th("状态"),
                        Th("绑定商户"),
                        Th("创建时间"),
                        Th("过期时间"),
                        Th("使用时间"),
                        Th("操作", cls="w-32")
                    )
                ),
                Tbody(*table_rows),
                cls="table table-zebra w-full"
            ),
            cls="overflow-x-auto bg-base-100 rounded-lg shadow"
        )
        
        # 分页
        pagination = ""
        if total > limit:
            pagination = Div(
                Div(
                    Button("上一页", 
                           onclick=f"loadPage({page-1})" if page > 1 else None,
                           disabled=page <= 1, cls="btn btn-sm"),
                    Span(f"第 {page} 页", cls="mx-4"),
                    Button("下一页", 
                           onclick=f"loadPage({page+1})" if has_more else None,
                           disabled=not has_more, cls="btn btn-sm"),
                    cls="join"
                ),
                cls="flex justify-center mt-6"
            )
        
        # 页面内容
        content = Div(
            # 页面标题
            Div(
                H1("绑定码管理", cls="page-title"),
                Div(
                    A("生成新绑定码", href="/binding-codes/generate", 
                      cls="btn btn-primary"),
                    A("导出数据", href="/binding-codes/export", 
                      cls="btn btn-secondary ml-2"),
                    cls="flex gap-2"
                ),
                cls="flex justify-between items-center mb-6"
            ),
            
            # 统计信息
            stats_cards,
            
            # 过滤器
            filter_form,
            
            # 数据表格
            table,
            
            # 分页
            pagination,
            
            # JavaScript
            Script("""
                function confirmDeleteCode(codeId) {
                    if (confirm('确定要删除这个绑定码吗？此操作不可撤销。')) {
                        fetch(`/binding-codes/${codeId}/delete`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            }
                        }).then(response => {
                            if (response.ok) {
                                location.reload();
                            } else {
                                alert('删除失败');
                            }
                        });
                    }
                }
                
                function loadPage(page) {
                    const params = new URLSearchParams(window.location.search);
                    params.set('page', page);
                    window.location.search = params.toString();
                }
            """)
        )
        
        return create_layout("绑定码管理", content)
        
    except Exception as e:
        logger.error(f"绑定码列表页面错误: {e}")
        error_content = Div(
            H1("页面错误", cls="text-2xl font-bold text-red-600 mb-4"),
            P(f"加载绑定码列表时发生错误: {str(e)}"),
            A("返回首页", href="/", cls="btn btn-primary mt-4")
        )
        return create_layout("页面错误", error_content)


@app.get("/binding-codes/generate")
@require_auth
async def binding_codes_generate_page(request: Request):
    """生成绑定码页面"""
    try:
        # 生成表单
        form = Form(
            Div(
                H2("生成新绑定码", cls="text-2xl font-bold mb-6"),
                
                # 数量选择
                Div(
                    Label("生成数量:", cls="label label-text font-semibold"),
                    Input(type="number", name="count", value="1", min="1", max="100",
                          cls="input input-bordered", required=True),
                    Div("一次最多生成100个绑定码", cls="text-sm text-gray-500 mt-1"),
                    cls="form-control mb-4"
                ),
                
                # 过期设置
                Div(
                    Label("过期时间:", cls="label label-text font-semibold"),
                    Select(
                        Option("永不过期", value=""),
                        Option("1小时后", value="1"),
                        Option("24小时后", value="24"),
                        Option("7天后", value="168"),
                        Option("30天后", value="720"),
                        name="expiry_hours",
                        cls="select select-bordered"
                    ),
                    cls="form-control mb-6"
                ),
                
                # 操作按钮
                Div(
                    Button("生成绑定码", type="submit", cls="btn btn-primary"),
                    A("取消", href="/binding-codes", cls="btn btn-ghost ml-2"),
                    cls="flex gap-2"
                ),
                
                cls="bg-base-100 p-6 rounded-lg shadow max-w-md mx-auto"
            ),
            method="POST",
            action="/binding-codes/generate"
        )
        
        content = Div(
            Div(
                A("← 返回绑定码管理", href="/binding-codes", 
                  cls="btn btn-ghost mb-4"),
                cls="mb-6"
            ),
            form
        )
        
        return create_layout("生成绑定码", content)
        
    except Exception as e:
        logger.error(f"绑定码生成页面错误: {e}")
        error_content = Div(
            H1("页面错误", cls="text-2xl font-bold text-red-600 mb-4"),
            P(f"加载生成页面时发生错误: {str(e)}"),
            A("返回绑定码管理", href="/binding-codes", cls="btn btn-primary mt-4")
        )
        return create_layout("页面错误", error_content)


@app.post("/binding-codes/generate")
@require_auth
async def binding_codes_generate_action(request: Request):
    """处理生成绑定码请求"""
    try:
        # 获取表单数据
        form_data = await request.form()
        # 生成数量
        raw_count = form_data.get("count", "1")
        try:
            count = int(str(raw_count).strip())
        except Exception:
            raise ValueError("生成数量必须是数字")
        # 过期时间：允许 '永不过期' 或空，及数字小时
        raw_expiry = form_data.get("expiry_hours")
        expiry_hours = None
        if raw_expiry is not None:
            s = str(raw_expiry).strip()
            if s and s not in ("永不过期", "none", "null", "-1"):
                if s.isdigit():
                    expiry_hours = int(s)
                else:
                    # 容错：尝试去除非数字字符
                    import re
                    digits = "".join(re.findall(r"\d+", s))
                    expiry_hours = int(digits) if digits else None
        
        # 验证数量
        if count < 1 or count > 100:
            raise ValueError("生成数量必须在1-100之间")
        
        # 此时 expiry_hours 已是 None 或 int
        
        # 生成绑定码
        generated_codes = []
        for i in range(count):
            code_info = await binding_codes_manager.generate_binding_code(
                expiry_hours=expiry_hours
            )
            generated_codes.append(code_info)
        
        # 显示结果页面
        codes_list = Div(
            *[
                Div(
                    Div(code['code'], cls="font-mono text-lg font-bold"),
                    Div(f"过期时间: {code.get('expires_at', '永不过期')}", 
                        cls="text-sm text-gray-500"),
                    cls="bg-base-200 p-3 rounded mb-2"
                )
                for code in generated_codes
            ]
        )
        
        content = Div(
            Div(
                H1("绑定码生成成功", cls="text-2xl font-bold text-success mb-4"),
                P(f"已成功生成 {count} 个绑定码:", cls="mb-4"),
                
                codes_list,
                
                Div(
                    A("返回绑定码管理", href="/binding-codes", cls="btn btn-primary"),
                    A("继续生成", href="/binding-codes/generate", cls="btn btn-ghost ml-2"),
                    cls="mt-6 flex gap-2"
                ),
                
                cls="max-w-2xl mx-auto"
            )
        )
        
        return create_layout("生成成功", content)
        
    except Exception as e:
        logger.error(f"生成绑定码失败: {e}")
        error_content = Div(
            H1("生成失败", cls="text-2xl font-bold text-red-600 mb-4"),
            P(f"生成绑定码时发生错误: {str(e)}"),
            A("重试", href="/binding-codes/generate", cls="btn btn-primary mt-4"),
            A("返回管理", href="/binding-codes", cls="btn btn-ghost mt-4 ml-2")
        )
        return create_layout("生成失败", error_content)


@app.get("/binding-codes/{code_id}/detail")
@require_auth
async def binding_code_detail(request: Request):
    """绑定码详情页面"""
    try:
        # 获取路径参数
        code_id = request.path_params.get("code_id")
        if not code_id:
            raise ValueError("缺少绑定码ID")
        
        # 获取绑定码信息
        code_info = await binding_codes_manager.get_binding_code_info(int(code_id))
        if not code_info:
            raise ValueError("绑定码不存在")
        
        # 状态徽章
        status_badge = Span(
            "已使用" if code_info.get('is_used') else "未使用",
            cls="badge badge-lg " + ("badge-success" if code_info.get('is_used') else "badge-warning")
        )
        
        # 商户信息
        merchant_section = ""
        if code_info.get('merchant_name'):
            merchant_section = Div(
                H3("绑定商户信息", cls="text-lg font-bold mb-2"),
                Div(
                    P(f"商户名称: {code_info.get('merchant_name')}"),
                    P(f"商户ID: {code_info.get('merchant_id')}"),
                    P(f"Telegram ID: {code_info.get('merchant_chat_id', '未知')}"),
                    P(f"绑定时间: {code_info.get('used_at', '未知')}"),
                    cls="bg-base-200 p-4 rounded"
                ),
                cls="mb-6"
            )
        
        # 详情内容
        content = Div(
            # 页面标题
            Div(
                A("← 返回绑定码管理", href="/binding-codes", 
                  cls="btn btn-ghost mb-4"),
                H1("绑定码详情", cls="page-title"),
                cls="mb-6"
            ),
            
            # 基本信息卡片
            Div(
                H2("基本信息", cls="text-xl font-bold mb-4"),
                Div(
                    Div(
                        Div("绑定码", cls="font-semibold"),
                        Div(code_info['code'], cls="font-mono text-lg"),
                        cls="flex justify-between items-center py-2"
                    ),
                    Div(
                        Div("状态", cls="font-semibold"),
                        status_badge,
                        cls="flex justify-between items-center py-2"
                    ),
                    Div(
                        Div("创建时间", cls="font-semibold"),
                        Div(code_info.get('created_at', '未知')),
                        cls="flex justify-between items-center py-2"
                    ),
                    Div(
                        Div("过期时间", cls="font-semibold"),
                        Div(code_info.get('expires_at', '永久有效')),
                        cls="flex justify-between items-center py-2"
                    ),
                    cls="divide-y divide-base-300"
                ),
                cls="bg-base-100 p-6 rounded-lg shadow mb-6"
            ),
            
            # 商户信息（如果已绑定）
            merchant_section,
            
            # 操作按钮
            Div(
                Button("删除绑定码", 
                       onclick=f"confirmDeleteCode({code_id})",
                       cls="btn btn-error"),
                A("编辑", href=f"/binding-codes/{code_id}/edit", 
                  cls="btn btn-primary ml-2"),
                cls="flex gap-2"
            ),
            
            # JavaScript
            Script(f"""
                function confirmDeleteCode(codeId) {{
                    if (confirm('确定要删除这个绑定码吗？此操作不可撤销。')) {{
                        fetch(`/binding-codes/${{codeId}}/delete`, {{
                            method: 'POST',
                            headers: {{
                                'Content-Type': 'application/json',
                            }}
                        }}).then(response => {{
                            if (response.ok) {{
                                window.location.href = '/binding-codes';
                            }} else {{
                                alert('删除失败');
                            }}
                        }});
                    }}
                }}
            """)
        )
        
        return create_layout("绑定码详情", content)
        
    except Exception as e:
        logger.error(f"绑定码详情页面错误: {e}")
        error_content = Div(
            H1("页面错误", cls="text-2xl font-bold text-red-600 mb-4"),
            P(f"加载绑定码详情时发生错误: {str(e)}"),
            A("返回绑定码管理", href="/binding-codes", cls="btn btn-primary mt-4")
        )
        return create_layout("页面错误", error_content)


@app.post("/binding-codes/{code_id}/delete")
@require_auth
async def binding_code_delete(request: Request):
    """删除绑定码"""
    try:
        # 获取路径参数
        code_id = request.path_params.get("code_id")
        if not code_id:
            raise ValueError("缺少绑定码ID")
        
        # 删除绑定码
        success = await binding_codes_manager.delete_binding_code(int(code_id))
        
        if success:
            logger.info(f"绑定码删除成功: {code_id}")
            return {"success": True, "message": "绑定码删除成功"}
        else:
            logger.warning(f"绑定码删除失败: {code_id}")
            return {"success": False, "message": "绑定码删除失败"}
        
    except Exception as e:
        logger.error(f"删除绑定码错误: {e}")
        return {"success": False, "message": f"删除失败: {str(e)}"}


@app.get("/binding-codes/export")
@require_auth
async def binding_codes_export(request: Request):
    """导出绑定码数据"""
    try:
        # 获取所有绑定码数据
        binding_data = await binding_codes_manager.get_all_binding_codes(
            include_used=True,
            include_expired=True
        )
        codes = binding_data.get("codes", [])
        
        # 创建CSV内容
        import io, csv
        output = io.StringIO()
        writer = csv.writer(output)
        
        # 写入标题行
        headers = [
            'ID', '绑定码', '状态', '商户ID', '商户名称', 
            '创建时间', '过期时间', '使用时间', '绑定用户名', '绑定用户姓名'
        ]
        writer.writerow(headers)
        
        # 写入数据行
        for code in codes:
            writer.writerow([
                code['id'],
                code['code'],
                '已使用' if code.get('is_used') else '未使用',
                code.get('merchant_id', ''),
                code.get('merchant_name', ''),
                code.get('created_at', ''),
                code.get('expires_at', ''),
                code.get('used_at', ''),
                code.get('bound_telegram_username', ''),
                code.get('bound_telegram_name', '')
            ])
        
        # 准备响应
        output.seek(0)
        filename = f"binding_codes_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        from starlette.responses import StreamingResponse
        
        def generate():
            yield output.getvalue().encode('utf-8-sig')  # BOM for Excel
        
        return StreamingResponse(
            generate(),
            media_type="text/csv",
            headers={"Content-Disposition": f"attachment; filename={filename}"}
        )
        
    except Exception as e:
        logger.error(f"导出绑定码数据失败: {e}")
        error_content = Div(
            H1("导出失败", cls="text-2xl font-bold text-red-600 mb-4"),
            P(f"导出绑定码数据时发生错误: {str(e)}"),
            A("返回绑定码管理", href="/binding-codes", cls="btn btn-primary mt-4")
        )
        return create_layout("导出失败", error_content)


# ==== 帖子管理模块 FastHTML 路由 ====

@app.get("/posts")
async def posts_list(request):
    """帖子列表页面"""
    try:
        # 解析查询参数
        params = dict(request.query_params)
        page = int(params.get('page', 1))
        per_page = int(params.get('per_page', 20))
        
        # 筛选参数
        status_filter = params.get('status', '')
        district_filter = params.get('district', '')
        search_query = params.get('search', '')
        sort_by = params.get('sort', 'created_at')
        
        # 获取帖子数据
        posts_data = await merchant_manager.get_merchants_list(
            page=page,
            per_page=per_page,
            status=status_filter,
            district_id=int(district_filter) if district_filter else None,
            search=search_query,
            sort_by=sort_by
        )
        
        # 获取地区列表
        districts = await region_manager.get_all_districts()
        
        # 构建筛选表单
        filter_form = Form(
            Div(
                # 状态筛选
                Div(
                    Label("状态筛选:", cls="label"),
                    Select(
                        Option("全部状态", value="", selected=not status_filter),
                        *[Option(POST_STATUS_DISPLAY_MAP[status], value=status, 
                               selected=status_filter==status) 
                          for status in POST_STATUS_DISPLAY_MAP.keys()],
                        name="status", cls="select select-bordered"
                    ),
                    cls="form-control w-full max-w-xs"
                ),
                
                # 区县筛选
                Div(
                    Label("区县筛选:", cls="label"),
                    Select(
                        Option("全部地区", value="", selected=not district_filter),
                        *[Option(f"{district['city_name']} - {district['name']}", 
                               value=str(district['id']),
                               selected=district_filter==str(district['id'])) 
                          for district in districts],
                        name="district", cls="select select-bordered"
                    ),
                    cls="form-control w-full max-w-xs"
                ),
                
                # 搜索框
                Div(
                    Label("搜索:", cls="label"),
                    Input(type="text", name="search", value=search_query,
                          placeholder="搜索商户名称或用户名", cls="input input-bordered"),
                    cls="form-control w-full max-w-xs"
                ),
                
                # 排序选择
                Div(
                    Label("排序:", cls="label"),
                    Select(
                        Option("创建时间", value="created_at", selected=sort_by=="created_at"),
                        Option("更新时间", value="updated_at", selected=sort_by=="updated_at"),
                        Option("发布时间", value="publish_time", selected=sort_by=="publish_time"),
                        name="sort", cls="select select-bordered"
                    ),
                    cls="form-control w-full max-w-xs"
                ),
                
                cls="flex flex-wrap gap-4 mb-4"
            ),
            
            Div(
                Button("搜索", type="submit", cls="btn btn-primary"),
                A("重置", href="/posts", cls="btn btn-ghost ml-2"),
                cls="flex gap-2"
            ),
            
            method="get"
        )
        
        # 构建帖子表格
        posts_table = Table(
            Thead(
                Tr(
                    Th("ID"),
                    Th("商户名称"),
                    Th("状态"),
                    Th("地区"),
                    Th("发布时间"),
                    Th("到期时间"),
                    Th("创建时间"),
                    Th("操作")
                )
            ),
            Tbody(
                *[
                    Tr(
                        Td(str(post['id'])),
                        Td(post.get('name', '未设置')),
                        Td(
                            Span(
                                POST_STATUS_DISPLAY_MAP.get(post['status'], post['status']),
                                cls=f"badge {get_posts_status_color(post['status'])}"
                            )
                        ),
                        Td(f"{post.get('city_name', '')} - {post.get('district_name', '')}"),
                        Td(post.get('publish_time', '未设置')),
                        Td(post.get('expiration_time', '未设置')),
                        Td(post.get('created_at', '')),
                        Td(
                            Div(
                                A("详情", href=f"/posts/{post['id']}", 
                                  cls="btn btn-sm btn-info mr-1"),
                                *generate_posts_quick_action_buttons(
                                    str(post['id']), post['status']
                                ),
                                cls="flex gap-1 flex-wrap"
                            )
                        )
                    )
                    for post in posts_data['posts']
                ]
            ),
            cls="table table-zebra w-full"
        )
        
        # 分页组件
        total_pages = (posts_data['total'] + per_page - 1) // per_page
        pagination = Div(
            Div(f"共 {posts_data['total']} 条记录", cls="text-sm text-gray-500"),
            Div(
                *[
                    A(
                        str(p),
                        href=f"/posts?page={p}&per_page={per_page}&status={status_filter}&district={district_filter}&search={search_query}&sort={sort_by}",
                        cls=f"btn btn-sm {'btn-active' if p == page else 'btn-ghost'}"
                    )
                    for p in range(max(1, page-2), min(total_pages+1, page+3))
                ],
                cls="btn-group"
            ),
            cls="flex justify-between items-center mt-4"
        )
        
        content = Div(
            H1("帖子管理", cls="page-title"),
            
            # 筛选表单
            Div(filter_form, cls="bg-base-100 p-4 rounded-lg shadow mb-6"),
            
            # 帖子表格
            Div(posts_table, cls="overflow-x-auto"),
            
            # 分页
            pagination if total_pages > 1 else "",
            
            cls="w-full"
        )
        
        return create_layout("帖子管理", content)
        
    except Exception as e:
        logger.error(f"获取帖子列表失败: {e}")
        error_content = Div(
            H1("获取失败", cls="text-2xl font-bold text-red-600 mb-4"),
            P(f"获取帖子列表时发生错误: {str(e)}"),
            A("返回首页", href="/", cls="btn btn-primary mt-4")
        )
        return create_layout("获取失败", error_content)


@app.get("/posts/{post_id}")
async def post_detail(post_id: int):
    """帖子详情和编辑页面"""
    try:
        # 获取帖子详情（使用V2标准方法）
        post_data = await merchant_manager.get_merchant(post_id)
        if not post_data:
            raise ValueError("帖子不存在")
        
        # 获取媒体文件
        media_files = await media_db.get_media_by_merchant_id(post_id)
        
        # 获取地区列表
        districts = await region_manager.get_all_districts()
        
        # 状态转换选项
        status_options = get_posts_next_status_options(post_data['status'])
        
        # 构建编辑表单
        edit_form = Form(
            Div(
                # 基本信息
                Div(
                    H3("基本信息", cls="text-lg font-bold mb-4"),
                    
                    Div(
                        Label("商户名称:", cls="label"),
                        Input(
                            name="name",
                            value=post_data.get('name', ''),
                            cls="input input-bordered w-full"
                        ),
                        cls="form-control w-full mb-4"
                    ),
                    
                    Div(
                        Label("地区:", cls="label"),
                        Select(
                            *[Option(f"{district['city_name']} - {district['name']}", 
                                   value=str(district['id']),
                                   selected=post_data.get('district_id')==district['id']) 
                              for district in districts],
                            name="district_id", cls="select select-bordered w-full"
                        ),
                        cls="form-control w-full mb-4"
                    ),
                    
                    cls="bg-base-200 p-4 rounded mb-6"
                ),
                
                # 价格信息（字段与数据库一致）
                Div(
                    H3("价格信息", cls="text-lg font-bold mb-4"),
                    
                    Div(
                        Div(
                            Label("价格1:", cls="label"),
                            Input(
                                type="number",
                                name="p_price",
                                value=str(post_data.get('p_price', '') or ''),
                                cls="input input-bordered w-full"
                            ),
                            cls="form-control w-full"
                        ),
                        Div(
                            Label("价格2:", cls="label"),
                            Input(
                                type="number", 
                                name="pp_price",
                                value=str(post_data.get('pp_price', '') or ''),
                                cls="input input-bordered w-full"
                            ),
                            cls="form-control w-full"
                        ),
                        cls="grid grid-cols-2 gap-4 mb-4"
                    ),
                    
                    cls="bg-base-200 p-4 rounded mb-6"
                ),
                
                # 描述信息（单字段）
                Div(
                    H3("描述信息", cls="text-lg font-bold mb-4"),
                    Div(
                        Label("自定义描述:", cls="label"),
                        Textarea(
                            post_data.get('custom_description', ''),
                            name="custom_description",
                            cls="textarea textarea-bordered w-full h-32"
                        ),
                        cls="form-control w-full mb-4"
                    ),
                    cls="bg-base-200 p-4 rounded mb-6"
                ),
                
                # 发布时间设置
                Div(
                    H3("发布设置", cls="text-lg font-bold mb-4"),
                    
                    Div(
                        Label("状态:", cls="label"),
                        Select(
                            *[Option(display_text, value=status_value,
                                   selected=post_data['status']==status_value)
                              for status_value, display_text in status_options],
                            name="status", cls="select select-bordered w-full"
                        ),
                        cls="form-control w-full mb-4"
                    ),
                    
                    Div(
                        Label("发布时间:", cls="label"),
                        Input(
                            type="datetime-local",
                            name="publish_time",
                            value=post_data.get('publish_time', '').replace(' ', 'T')[:16] if post_data.get('publish_time') else '',
                            cls="input input-bordered w-full"
                        ),
                        cls="form-control w-full mb-4"
                    ),
                    
                    Div(
                        Label("到期时间:", cls="label"),
                        Input(
                            type="datetime-local",
                            name="expiration_time", 
                            value=post_data.get('expiration_time', '').replace(' ', 'T')[:16] if post_data.get('expiration_time') else '',
                            cls="input input-bordered w-full"
                        ),
                        cls="form-control w-full mb-4"
                    ),
                    
                    cls="bg-base-200 p-4 rounded mb-6"
                ),
                
                cls="max-w-4xl mx-auto"
            ),
            
            # 提交按钮
            Div(
                Button("保存修改", type="submit", cls="btn btn-primary"),
                A("取消", href="/posts", cls="btn btn-ghost ml-2"),
                cls="flex gap-2 justify-center mt-6"
            ),
            
            method="post",
            action=f"/posts/{post_id}/update"
        )
        
        # 媒体文件展示
        media_section = ""
        if media_files:
            media_section = Div(
                H3("媒体文件", cls="text-lg font-bold mb-4"),
                Div(
                    *[
                        Div(
                            Img(src=f"/media-proxy/{media['id']}", 
                                cls="w-32 h-32 object-cover rounded"),
                            P(f"类型: {media['media_type']}", cls="text-sm text-gray-500 mt-1"),
                            cls="flex flex-col items-center"
                        )
                        for media in media_files
                    ],
                    cls="flex flex-wrap gap-4"
                ),
                cls="bg-base-200 p-4 rounded mb-6"
            )
        
        # 快速操作按钮
        quick_actions = Div(
            H3("快速操作", cls="text-lg font-bold mb-4"),
            Div(
                *generate_posts_quick_action_buttons(str(post_id), post_data['status']),
                cls="flex gap-2 flex-wrap"
            ),
            cls="bg-base-200 p-4 rounded mb-6"
        )
        
        content = Div(
            H1(f"帖子详情 #{post_id}", cls="page-title"),
            
            # 当前状态
            Div(
                Span("当前状态: ", cls="text-lg"),
                Span(
                    POST_STATUS_DISPLAY_MAP.get(post_data['status'], post_data['status']),
                    cls=f"badge badge-lg {get_posts_status_color(post_data['status'])}"
                ),
                cls="mb-6"
            ),
            
            # 媒体文件
            media_section,
            
            # 快速操作
            quick_actions,
            
            # 编辑表单
            edit_form,
            
            cls="w-full"
        )
        
        return create_layout("帖子详情", content)
        
    except Exception as e:
        logger.error(f"获取帖子详情失败: {e}")
        error_content = Div(
            H1("获取失败", cls="text-2xl font-bold text-red-600 mb-4"),
            P(f"获取帖子详情时发生错误: {str(e)}"),
            A("返回帖子列表", href="/posts", cls="btn btn-primary mt-4")
        )
        return create_layout("获取失败", error_content)


@app.post("/posts/{post_id}/update")
async def post_update(post_id: int, request):
    """更新帖子信息"""
    try:
        # 获取表单数据
        form_data = await request.form()
        
        # 处理时间格式
        publish_time = form_data.get('publish_time')
        if publish_time:
            publish_time = publish_time.replace('T', ' ')
        
        expiration_time = form_data.get('expiration_time') 
        if expiration_time:
            expiration_time = expiration_time.replace('T', ' ')
        
        # 更新数据（唯一字段，直写数据库列）
        update_data = {
            'name': form_data.get('name'),
            'district_id': int(form_data.get('district_id')) if form_data.get('district_id') else None,
            'p_price': int(form_data.get('p_price')) if form_data.get('p_price') else None,
            'pp_price': int(form_data.get('pp_price')) if form_data.get('pp_price') else None,
            'custom_description': form_data.get('custom_description') or None,
            'status': form_data.get('status'),
            'publish_time': publish_time,
            'expiration_time': expiration_time
        }

        await merchant_manager.update_merchant(post_id, update_data)
        
        # 重定向到详情页
        from starlette.responses import RedirectResponse
        return RedirectResponse(url=f"/posts/{post_id}", status_code=302)
        
    except Exception as e:
        logger.error(f"更新帖子失败: {e}")
        error_content = Div(
            H1("更新失败", cls="text-2xl font-bold text-red-600 mb-4"),
            P(f"更新帖子信息时发生错误: {str(e)}"),
            A("返回详情页", href=f"/posts/{post_id}", cls="btn btn-primary mt-4")
        )
        return create_layout("更新失败", error_content)


@app.post("/posts/{post_id}/approve")
async def post_approve(post_id: int):
    """批准帖子"""
    try:
        await merchant_manager.update_merchant_status(post_id, MERCHANT_STATUS.APPROVED.value)
        
        from starlette.responses import RedirectResponse
        return RedirectResponse(url="/posts", status_code=302)
        
    except Exception as e:
        logger.error(f"批准帖子失败: {e}")
        from starlette.responses import RedirectResponse
        return RedirectResponse(url="/posts?error=批准失败", status_code=302)


@app.post("/posts/{post_id}/reject")
async def post_reject(post_id: int):
    """驳回帖子"""
    try:
        await merchant_manager.update_merchant_status(post_id, MERCHANT_STATUS.PENDING_SUBMISSION.value)
        
        from starlette.responses import RedirectResponse
        return RedirectResponse(url="/posts", status_code=302)
        
    except Exception as e:
        logger.error(f"驳回帖子失败: {e}")
        from starlette.responses import RedirectResponse
        return RedirectResponse(url="/posts?error=驳回失败", status_code=302)


@app.post("/posts/{post_id}/publish")
async def post_publish(post_id: int):
    """立即发布帖子"""
    try:
        # 设置当前时间为发布时间
        from datetime import datetime
        now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        await merchant_manager.update_merchant(post_id, {
            'status': MERCHANT_STATUS.PUBLISHED.value,
            'publish_time': now
        })
        
        from starlette.responses import RedirectResponse
        return RedirectResponse(url="/posts", status_code=302)
        
    except Exception as e:
        logger.error(f"发布帖子失败: {e}")
        from starlette.responses import RedirectResponse
        return RedirectResponse(url="/posts?error=发布失败", status_code=302)


@app.post("/posts/{post_id}/expire")
async def post_expire(post_id: int):
    """设为过期"""
    try:
        await merchant_manager.update_merchant_status(post_id, MERCHANT_STATUS.EXPIRED.value)
        
        from starlette.responses import RedirectResponse
        return RedirectResponse(url="/posts", status_code=302)
        
    except Exception as e:
        logger.error(f"设置过期失败: {e}")
        from starlette.responses import RedirectResponse
        return RedirectResponse(url="/posts?error=设置过期失败", status_code=302)


@app.post("/posts/{post_id}/extend")
async def post_extend(post_id: int, request):
    """延长帖子时间"""
    try:
        form_data = await request.form()
        days = int(form_data.get('days', 1))
        
        # 获取当前帖子信息
        post_data = await merchant_manager.get_merchant(post_id)
        if not post_data:
            raise ValueError("帖子不存在")
        
        # 计算新的到期时间
        from datetime import datetime, timedelta
        current_expiry = datetime.strptime(post_data.get('expiration_time', ''), '%Y-%m-%d %H:%M:%S') if post_data.get('expiration_time') else datetime.now()
        new_expiry = current_expiry + timedelta(days=days)
        
        await merchant_manager.update_merchant(post_id, {
            'expiration_time': new_expiry.strftime('%Y-%m-%d %H:%M:%S')
        })
        
        from starlette.responses import RedirectResponse
        return RedirectResponse(url="/posts", status_code=302)
        
    except Exception as e:
        logger.error(f"延长时间失败: {e}")
        from starlette.responses import RedirectResponse
        return RedirectResponse(url="/posts?error=延长时间失败", status_code=302)


@app.post("/posts/{post_id}/delete")
async def post_delete(post_id: int):
    """删除帖子"""
    try:
        await merchant_manager.delete_merchant(post_id)
        
        from starlette.responses import RedirectResponse
        return RedirectResponse(url="/posts", status_code=302)
        
    except Exception as e:
        logger.error(f"删除帖子失败: {e}")
        from starlette.responses import RedirectResponse
        return RedirectResponse(url="/posts?error=删除失败", status_code=302)


# ==== 订单管理模块 FastHTML 路由 ====

# 实例化订单管理器
order_manager = OrderManager()

@app.get("/orders")
async def orders_list(request):
    """订单列表页面 - 包含完整的模块关联功能"""
    try:
        # 解析查询参数
        params = dict(request.query_params)
        page = int(params.get('page', 1))
        per_page = int(params.get('per_page', 20))
        
        # 筛选参数
        status_filter = params.get('status', '')
        merchant_filter = params.get('merchant_id', '')
        customer_filter = params.get('customer_id', '')
        date_from = params.get('date_from', '')
        date_to = params.get('date_to', '')
        
        # 获取订单数据（对接V2后端方法）
        orders = await order_manager.get_orders(
            status=status_filter or None,
            merchant_id=int(merchant_filter) if merchant_filter else None,
            user_id=int(customer_filter) if customer_filter else None,
            date_from=date_from or None,
            date_to=date_to or None,
            limit=per_page,
            offset=(page - 1) * per_page
        )

        # 获取总数用于分页
        total_count = await order_manager.count_orders(
            status=status_filter or None,
            merchant_id=int(merchant_filter) if merchant_filter else None,
            user_id=int(customer_filter) if customer_filter else None,
            date_from=date_from or None,
            date_to=date_to or None
        )

        orders_data = {
            'orders': orders,
            'total': total_count,
            'page': page,
            'per_page': per_page
        }

        # 获取统计数据（使用标准方法名）
        stats = await order_manager.get_order_statistics()
        
        # 获取商户列表（用于筛选）
        merchants = await merchant_manager.get_all_merchants()
        
        # 构建筛选表单
        filter_form = Form(
            Div(
                # 状态筛选
                Div(
                    Label("状态筛选:", cls="label"),
                    Select(
                        Option("全部状态", value="", selected=not status_filter),
                        *[Option(ORDER_STATUS_DISPLAY_MAP[status], value=status, 
                               selected=status_filter==status) 
                          for status in ORDER_STATUS_DISPLAY_MAP.keys()],
                        name="status", cls="select select-bordered"
                    ),
                    cls="form-control w-full max-w-xs"
                ),
                
                # 商户筛选
                Div(
                    Label("商户筛选:", cls="label"),
                    Select(
                        Option("全部商户", value="", selected=not merchant_filter),
                        *[Option(f"#{merchant['id']} - {merchant.get('name', '未设置')}", 
                               value=str(merchant['id']),
                               selected=merchant_filter==str(merchant['id'])) 
                          for merchant in merchants],
                        name="merchant_id", cls="select select-bordered"
                    ),
                    cls="form-control w-full max-w-xs"
                ),
                
                # 日期筛选
                Div(
                    Label("开始日期:", cls="label"),
                    Input(type="date", name="date_from", value=date_from,
                          cls="input input-bordered"),
                    cls="form-control w-full max-w-xs"
                ),
                
                Div(
                    Label("结束日期:", cls="label"),
                    Input(type="date", name="date_to", value=date_to,
                          cls="input input-bordered"),
                    cls="form-control w-full max-w-xs"
                ),
                
                cls="flex flex-wrap gap-4 mb-4"
            ),
            
            Div(
                Button("搜索", type="submit", cls="btn btn-primary"),
                A("重置", href="/orders", cls="btn btn-ghost ml-2"),
                cls="flex gap-2"
            ),
            
            method="get"
        )
        
        # 统计面板
        stats_panel = generate_order_statistics_panel(stats)
        
        # 批量操作面板
        batch_operations = generate_order_batch_operations()
        
        # 构建订单表格
        orders_table = Table(
            Thead(
                Tr(
                    Th(Input(type="checkbox", cls="checkbox", id="select_all")),
                    Th("订单ID"),
                    Th("商户"),
                    Th("客户"),
                    Th("价格"),
                    Th("状态"),
                    Th("预约时间"),
                    Th("创建时间"),
                    Th("操作")
                )
            ),
            Tbody(
                *[
                    Tr(
                        Td(Input(type="checkbox", name="order_ids", 
                                value=str(order['id']), cls="checkbox")),
                        Td(f"#{order['id']}"),
                        Td(
                            Div(
                                P(order.get('merchant_name', '未设置'), cls="font-semibold"),
                                P(f"ID: {order['merchant_id']}", cls="text-sm text-gray-500"),
                                cls="flex flex-col"
                            )
                        ),
                        Td(
                            Div(
                                P(order.get('customer_username', '未知用户'), cls="font-semibold"),
                                P(f"ID: {order['customer_user_id']}", cls="text-sm text-gray-500"),
                                cls="flex flex-col"
                            )
                        ),
                        Td(f"¥{order['price']}"),
                        Td(
                            Span(
                                get_order_status_icon(order['status']),
                                ORDER_STATUS_DISPLAY_MAP.get(order['status'], order['status']),
                                cls=f"badge {get_order_status_color(order['status'])} gap-1"
                            )
                        ),
                        Td(order.get('appointment_time', '未设置')),
                        Td(order.get('created_at', '')),
                        Td(
                            Div(
                                A("详情", href=f"/orders/{order['id']}", 
                                  cls="btn btn-sm btn-info mr-1"),
                                *generate_order_action_buttons(
                                    str(order['id']), 
                                    order['status'],
                                    order['merchant_id'],
                                    order['customer_user_id']
                                ),
                                cls="flex gap-1 flex-wrap"
                            )
                        )
                    )
                    for order in orders_data['orders']
                ]
            ),
            cls="table table-zebra w-full"
        )
        
        # 分页组件
        total_pages = (orders_data['total'] + per_page - 1) // per_page
        pagination = Div(
            Div(f"共 {orders_data['total']} 条记录", cls="text-sm text-gray-500"),
            Div(
                *[
                    A(
                        str(p),
                        href=f"/orders?page={p}&per_page={per_page}&status={status_filter}&merchant_id={merchant_filter}&date_from={date_from}&date_to={date_to}",
                        cls=f"btn btn-sm {'btn-active' if p == page else 'btn-ghost'}"
                    )
                    for p in range(max(1, page-2), min(total_pages+1, page+3))
                ],
                cls="btn-group"
            ),
            cls="flex justify-between items-center mt-4"
        )
        
        # 全选功能脚本
        select_all_script = Script(
            """
            document.getElementById('select_all').addEventListener('change', function(e) {
                const checkboxes = document.getElementsByName('order_ids');
                checkboxes.forEach(cb => cb.checked = e.target.checked);
            });
            """
        )
        
        content = Div(
            H1("订单管理", cls="page-title"),
            
            # 统计面板
            stats_panel,
            
            # 筛选表单
            Div(filter_form, cls="bg-base-100 p-4 rounded-lg shadow mb-6"),
            
            # 批量操作
            batch_operations,
            
            # 订单表格
            Div(orders_table, cls="overflow-x-auto"),
            
            # 分页
            pagination if total_pages > 1 else "",
            
            # JavaScript
            select_all_script,
            
            cls="w-full"
        )
        
        return create_layout("订单管理", content)
        
    except Exception as e:
        logger.error(f"获取订单列表失败: {e}")
        error_content = Div(
            H1("获取失败", cls="text-2xl font-bold text-red-600 mb-4"),
            P(f"获取订单列表时发生错误: {str(e)}"),
            A("返回首页", href="/", cls="btn btn-primary mt-4")
        )
        return create_layout("获取失败", error_content)


@app.get("/orders/{order_id}")
async def order_detail(order_id: int):
    """订单详情页面 - 包含完整的关联模块信息"""
    try:
        # 获取订单详情
        order_data = await order_manager.get_order_by_id(order_id)
        if not order_data:
            raise ValueError("订单不存在")
        
        # 获取关联的商户信息
        merchant_info = await merchant_manager.get_merchant(order_data['merchant_id'])
        
        # 获取关联的用户信息
        customer_info = await user_manager.get_user_profile(order_data['customer_user_id'])
        
        # 获取关联的评价信息（如果有）
        review_info = None
        if order_data['status'] in [ORDER_STATUS.REVIEWED.value, ORDER_STATUS.MUTUAL_REVIEW.value, ORDER_STATUS.SINGLE_REVIEW.value]:
            try:
                review_info = await review_manager.get_review_by_order(order_id)
            except:
                pass
        
        # 状态转换选项
        status_options = get_order_next_status_options(order_data['status'])
        
        # 构建订单信息卡片
        order_info_card = Div(
            H3("订单信息", cls="text-lg font-bold mb-4"),
            
            Div(
                Div(
                    Div("订单状态", cls="stat-title"),
                    Div(
                        Span(
                            get_order_status_icon(order_data['status']),
                            ORDER_STATUS_DISPLAY_MAP.get(order_data['status'], order_data['status']),
                            cls=f"badge badge-lg {get_order_status_color(order_data['status'])} gap-2"
                        ),
                        cls="stat-value text-sm"
                    ),
                    cls="stat"
                ),
                Div(
                    Div("订单价格", cls="stat-title"),
                    Div(f"¥{order_data['price']}", cls="stat-value text-success"),
                    cls="stat"
                ),
                Div(
                    Div("创建时间", cls="stat-title"),
                    Div(order_data.get('created_at', '未知'), cls="stat-value text-sm"),
                    cls="stat"
                ),
                cls="stats shadow mb-4"
            ),
            
            cls="bg-base-200 p-4 rounded mb-6"
        )
        
        # 商户信息卡片
        merchant_card = Div(
            H3("商户信息", cls="text-lg font-bold mb-4"),
            
            Div(
                P(f"商户名称: {merchant_info.get('name', '未设置')}", cls="text-lg font-semibold"),
                P(f"商户ID: #{merchant_info['id']}", cls="text-gray-500"),
                P(f"联系方式: {merchant_info.get('username', '未设置')}", cls="text-gray-500"),
                P(f"地区: {merchant_info.get('city_name', '')} - {merchant_info.get('district_name', '')}", cls="text-gray-500"),
                
                # 商户操作按钮
                Div(
                    A("查看商户详情", href=f"/posts/{order_data['merchant_id']}", 
                      cls="btn btn-primary btn-sm"),
                    A("联系商户", href=f"https://t.me/xiaojisystembot?start=merchant_{order_data['merchant_id']}", 
                      target="_blank", cls="btn btn-info btn-sm ml-2"),
                    cls="mt-4 flex gap-2"
                )
            ),
            
            cls="bg-base-200 p-4 rounded mb-6"
        )
        
        # 客户信息卡片
        customer_card = Div(
            H3("客户信息", cls="text-lg font-bold mb-4"),
            
            Div(
                P(f"用户名: {order_data.get('customer_username', '未知')}", cls="text-lg font-semibold"),
                P(f"Telegram ID: {order_data['customer_user_id']}", cls="text-gray-500"),
                P(f"等级: {customer_info.get('level', 1) if customer_info else '未知'}", cls="text-gray-500"),
                P(f"积分: {customer_info.get('points', 0) if customer_info else '未知'}", cls="text-gray-500"),
                
                # 客户操作按钮
                Div(
                    A("查看用户资料", href=f"/users/{order_data['customer_user_id']}", 
                      cls="btn btn-secondary btn-sm"),
                    cls="mt-4"
                )
            ),
            
            cls="bg-base-200 p-4 rounded mb-6"
        )
        
        # 评价信息卡片（如果有评价）
        review_card = ""
        if review_info:
            review_card = Div(
                H3("评价信息", cls="text-lg font-bold mb-4"),
                
                Div(
                    P(f"颜值评分: {review_info.get('rating_appearance', '未评分')}/10", cls="mb-2"),
                    P(f"身材评分: {review_info.get('rating_figure', '未评分')}/10", cls="mb-2"),
                    P(f"服务评分: {review_info.get('rating_service', '未评分')}/10", cls="mb-2"),
                    P(f"态度评分: {review_info.get('rating_attitude', '未评分')}/10", cls="mb-2"),
                    P(f"环境评分: {review_info.get('rating_environment', '未评分')}/10", cls="mb-2"),
                    
                    # 文字评价
                    review_info.get('text_review_by_user') and Div(
                        P("文字评价:", cls="font-semibold"),
                        P(review_info['text_review_by_user'], cls="text-gray-700 bg-gray-100 p-2 rounded"),
                        cls="mt-4"
                    ),
                    
                    # 商户确认状态
                    Div(
                        P("商户确认:", cls="font-semibold"),
                        Span(
                            "✅ 已确认" if review_info.get('is_confirmed_by_merchant') else "⏳ 待确认",
                            cls=f"badge {'badge-success' if review_info.get('is_confirmed_by_merchant') else 'badge-warning'}"
                        ),
                        cls="mt-2"
                    ),
                    
                    # 评价管理按钮
                    Div(
                        A("查看完整评价", href=f"/reviews/order/{order_id}", 
                          cls="btn btn-accent btn-sm"),
                        A("评价管理", href=f"/reviews?order_id={order_id}", 
                          cls="btn btn-outline btn-accent btn-sm ml-2"),
                        cls="mt-4 flex gap-2"
                    )
                ),
                
                cls="bg-base-200 p-4 rounded mb-6"
            )
        
        # 状态管理表单
        status_form = Form(
            H3("状态管理", cls="text-lg font-bold mb-4"),
            
            Div(
                Label("更新状态:", cls="label"),
                Select(
                    *[Option(display_text, value=status_value,
                           selected=order_data['status']==status_value)
                      for status_value, display_text in status_options],
                    name="status", cls="select select-bordered w-full max-w-xs"
                ),
                cls="form-control w-full max-w-xs mb-4"
            ),
            
            # 备注字段
            Div(
                Label("操作备注:", cls="label"),
                Textarea(
                    name="note",
                    placeholder="可选：记录状态变更原因...",
                    cls="textarea textarea-bordered w-full"
                ),
                cls="form-control w-full mb-4"
            ),
            
            Div(
                Button("更新状态", type="submit", cls="btn btn-primary"),
                A("取消", href="/orders", cls="btn btn-ghost ml-2"),
                cls="flex gap-2"
            ),
            
            method="post",
            action=f"/orders/{order_id}/update_status",
            cls="bg-base-200 p-4 rounded mb-6"
        )
        
        # 快速操作按钮
        quick_actions = Div(
            H3("快速操作", cls="text-lg font-bold mb-4"),
            Div(
                *generate_order_action_buttons(
                    str(order_id), 
                    order_data['status'],
                    order_data['merchant_id'],
                    order_data['customer_user_id']
                ),
                cls="flex gap-2 flex-wrap"
            ),
            cls="bg-base-200 p-4 rounded mb-6"
        )
        
        content = Div(
            H1(f"订单详情 #{order_id}", cls="page-title"),
            
            # 订单基本信息
            order_info_card,
            
            Div(
                # 左侧：商户和客户信息
                Div(
                    merchant_card,
                    customer_card,
                    cls="space-y-4"
                ),
                
                # 右侧：评价信息和操作
                Div(
                    review_card,
                    status_form,
                    quick_actions,
                    cls="space-y-4"
                ),
                
                cls="grid grid-cols-1 lg:grid-cols-2 gap-6"
            ),
            
            cls="w-full"
        )
        
        return create_layout("订单详情", content)
        
    except Exception as e:
        logger.error(f"获取订单详情失败: {e}")
        error_content = Div(
            H1("获取失败", cls="text-2xl font-bold text-red-600 mb-4"),
            P(f"获取订单详情时发生错误: {str(e)}"),
            A("返回订单列表", href="/orders", cls="btn btn-primary mt-4")
        )
        return create_layout("获取失败", error_content)


@app.post("/orders/{order_id}/update_status")
async def order_update_status(order_id: int, request):
    """更新订单状态"""
    try:
        form_data = await request.form()
        new_status = form_data.get('status')
        note = form_data.get('note', '')
        
        await order_manager.update_order_status(order_id, new_status)
        
        from starlette.responses import RedirectResponse
        return RedirectResponse(url=f"/orders/{order_id}", status_code=302)
        
    except Exception as e:
        logger.error(f"更新订单状态失败: {e}")
        from starlette.responses import RedirectResponse
        return RedirectResponse(url=f"/orders/{order_id}?error=更新失败", status_code=302)


@app.post("/orders/{order_id}/complete")
async def order_complete(order_id: int):
    """标记订单完成"""
    try:
        await order_manager.update_order_status(order_id, ORDER_STATUS.COMPLETED.value)
        
        from starlette.responses import RedirectResponse
        return RedirectResponse(url="/orders", status_code=302)
        
    except Exception as e:
        logger.error(f"标记订单完成失败: {e}")
        from starlette.responses import RedirectResponse
        return RedirectResponse(url="/orders?error=操作失败", status_code=302)


@app.post("/orders/{order_id}/cancel")
async def order_cancel(order_id: int):
    """取消订单"""
    try:
        await order_manager.delete_order(order_id)
        
        from starlette.responses import RedirectResponse
        return RedirectResponse(url="/orders", status_code=302)
        
    except Exception as e:
        logger.error(f"取消订单失败: {e}")
        from starlette.responses import RedirectResponse
        return RedirectResponse(url="/orders?error=取消失败", status_code=302)


@app.post("/orders/{order_id}/mark_reviewed")
async def order_mark_reviewed(order_id: int):
    """标记订单已评价"""
    try:
        await order_manager.update_order_status(order_id, ORDER_STATUS.REVIEWED.value)
        
        from starlette.responses import RedirectResponse
        return RedirectResponse(url="/orders", status_code=302)
        
    except Exception as e:
        logger.error(f"标记订单评价失败: {e}")
        from starlette.responses import RedirectResponse
        return RedirectResponse(url="/orders?error=操作失败", status_code=302)


@app.post("/orders/batch")
async def orders_batch_operation(request):
    """批量操作订单"""
    try:
        form_data = await request.form()
        action = form_data.get('batch_action')
        order_ids = form_data.getlist('order_ids')
        
        if not order_ids:
            raise ValueError("请选择要操作的订单")
        
        if action == 'batch_complete':
            for order_id in order_ids:
                await order_manager.update_order_status(int(order_id), ORDER_STATUS.COMPLETED.value)
        elif action == 'batch_reviewed':
            for order_id in order_ids:
                await order_manager.update_order_status(int(order_id), ORDER_STATUS.REVIEWED.value)
        elif action == 'batch_cancel':
            for order_id in order_ids:
                await order_manager.delete_order(int(order_id))
        elif action == 'batch_export':
            # 导出CSV文件
            import csv
            import io
            from starlette.responses import StreamingResponse
            
            orders_data = []
            for order_id in order_ids:
                order = await order_manager.get_order_by_id(int(order_id))
                if order:
                    orders_data.append(order)
            
            output = io.StringIO()
            writer = csv.writer(output)
            
            # 写入标题行
            writer.writerow([
                '订单ID', '商户ID', '商户名称', '客户ID', '客户用户名', 
                '价格', '状态', '预约时间', '完成时间', '创建时间'
            ])
            
            # 写入数据行
            for order in orders_data:
                writer.writerow([
                    order['id'],
                    order['merchant_id'],
                    order.get('merchant_name', ''),
                    order['customer_user_id'],
                    order.get('customer_username', ''),
                    order['price'],
                    ORDER_STATUS_DISPLAY_MAP.get(order['status'], order['status']),
                    order.get('appointment_time', ''),
                    order.get('completion_time', ''),
                    order.get('created_at', '')
                ])
            
            output.seek(0)
            filename = f"orders_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            
            def generate():
                yield output.getvalue().encode('utf-8-sig')
            
            return StreamingResponse(
                generate(),
                media_type="text/csv",
                headers={"Content-Disposition": f"attachment; filename={filename}"}
            )
        
        from starlette.responses import RedirectResponse
        return RedirectResponse(url="/orders", status_code=302)
        
    except Exception as e:
        logger.error(f"批量操作失败: {e}")
        from starlette.responses import RedirectResponse
        return RedirectResponse(url="/orders?error=批量操作失败", status_code=302)

