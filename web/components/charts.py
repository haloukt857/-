"""
Charts Components - ÁªüËÆ°ÂõæË°®ÁªÑ‰ª∂

Êèê‰æõÁªüËÆ°Âç°Áâá„ÄÅËøõÂ∫¶Êù°„ÄÅÂõæË°®ÂÆπÂô®Á≠âÁªÑ‰ª∂„ÄÇ
ÊîØÊåÅÊï∞ÊçÆÂèØËßÜÂåñ„ÄÅÊåáÊ†áÂ±ïÁ§∫„ÄÅË∂ãÂäøÂàÜÊûêÁ≠âÂäüËÉΩ„ÄÇ

Usage:
    from web.components.charts import stats_card, progress_bar, chart_container
    
    card = stats_card("ÊÄªÁî®Êà∑", "1,234", "‚Üë 12%", "text-success")
    bar = progress_bar(75, "‰ªªÂä°ÂÆåÊàêÂ∫¶")
"""

from typing import List, Dict, Any, Optional, Union
from fasthtml.common import *


def stats_card(
    title: str,
    value: Union[str, int, float],
    change: Optional[str] = None,
    change_class: str = "text-success",
    icon: Optional[str] = None,
    **kwargs
) -> Div:
    """
    ÂàõÂª∫ÁªüËÆ°Âç°ÁâáÁªÑ‰ª∂
    
    Args:
        title (str): Âç°ÁâáÊ†áÈ¢ò
        value (Union[str, int, float]): ‰∏ªË¶ÅÊï∞ÂÄº
        change (str, optional): ÂèòÂåñÊåáÁ§∫ÔºàÂ¶Ç "‚Üë 12%"Ôºâ
        change_class (str): ÂèòÂåñÊåáÁ§∫ÁöÑCSSÁ±ªÂêç
        icon (str, optional): ÂõæÊ†áHTMLÊàñÊñáÊú¨
        **kwargs: ÂÖ∂‰ªñHTMLÂ±ûÊÄß
        
    Returns:
        Div: ÁªüËÆ°Âç°Áâá
        
    Example:
        card = stats_card(
            "ÊÄªÁî®Êà∑Êï∞", 
            "1,234",
            "‚Üë 12%",
            "text-success",
            icon="üë•"
        )
    """
    card_content = []
    
    # Âç°ÁâáÂ§¥ÈÉ®ÔºàÊ†áÈ¢òÂíåÂõæÊ†áÔºâ
    header_content = [Span(title, cls="text-sm text-gray-600")]
    if icon:
        header_content.insert(0, Span(icon, cls="text-lg mr-2"))
    
    card_content.append(
        Div(*header_content, cls="flex items-center mb-2")
    )
    
    # ‰∏ªË¶ÅÊï∞ÂÄº
    card_content.append(
        Div(str(value), cls="text-2xl font-bold text-gray-800")
    )
    
    # ÂèòÂåñÊåáÁ§∫
    if change:
        card_content.append(
            Div(change, cls=f"text-sm {change_class} mt-1")
        )
    
    default_cls = "bg-white p-4 rounded-lg shadow border"
    cls = kwargs.pop('cls', default_cls)
    
    return Div(*card_content, cls=cls, **kwargs)


def progress_bar(
    value: Union[int, float],
    label: Optional[str] = None,
    max_value: Union[int, float] = 100,
    color_class: str = "progress-primary",
    show_percentage: bool = True,
    **kwargs
) -> Div:
    """
    ÂàõÂª∫ËøõÂ∫¶Êù°ÁªÑ‰ª∂
    
    Args:
        value (Union[int, float]): ÂΩìÂâçÂÄº
        label (str, optional): ËøõÂ∫¶Êù°Ê†áÁ≠æ
        max_value (Union[int, float]): ÊúÄÂ§ßÂÄº
        color_class (str): ËøõÂ∫¶Êù°È¢úËâ≤Á±ª
        show_percentage (bool): ÊòØÂê¶ÊòæÁ§∫ÁôæÂàÜÊØî
        **kwargs: ÂÖ∂‰ªñHTMLÂ±ûÊÄß
        
    Returns:
        Div: ËøõÂ∫¶Êù°ÂÆπÂô®
        
    Example:
        bar = progress_bar(75, "‰ªªÂä°ÂÆåÊàêÂ∫¶", color_class="progress-success")
    """
    percentage = min(100, (value / max_value) * 100)
    
    content = []
    
    # Ê†áÁ≠æÂíåÁôæÂàÜÊØî
    if label or show_percentage:
        header_content = []
        if label:
            header_content.append(Span(label, cls="text-sm font-medium"))
        if show_percentage:
            percentage_text = f"{percentage:.1f}%" if percentage != int(percentage) else f"{int(percentage)}%"
            header_content.append(Span(percentage_text, cls="text-sm text-gray-600"))
        
        if len(header_content) == 1:
            content.append(Div(header_content[0], cls="mb-1"))
        else:
            content.append(
                Div(
                    header_content[0],
                    header_content[1], 
                    cls="flex justify-between items-center mb-1"
                )
            )
    
    # ËøõÂ∫¶Êù°
    content.append(
        Progress(
            value=percentage,
            max=100,
            cls=f"progress {color_class} w-full"
        )
    )
    
    container_cls = kwargs.pop('cls', 'mb-4')
    
    return Div(*content, cls=container_cls, **kwargs)


def chart_container(
    title: str,
    chart_content,
    subtitle: Optional[str] = None,
    actions: Optional[List] = None,
    **kwargs
) -> Div:
    """
    ÂàõÂª∫ÂõæË°®ÂÆπÂô®ÁªÑ‰ª∂
    
    Args:
        title (str): ÂõæË°®Ê†áÈ¢ò
        chart_content: ÂõæË°®ÂÜÖÂÆπ
        subtitle (str, optional): ÂâØÊ†áÈ¢ò
        actions (List, optional): Êìç‰ΩúÊåâÈíÆÂàóË°®
        **kwargs: ÂÖ∂‰ªñHTMLÂ±ûÊÄß
        
    Returns:
        Div: ÂõæË°®ÂÆπÂô®
        
    Example:
        container = chart_container(
            "ÈîÄÂîÆË∂ãÂäø",
            Div("ÂõæË°®ÂÜÖÂÆπ"),
            subtitle="ÊúÄËøë30Â§©",
            actions=[Button("ÂØºÂá∫", cls="btn btn-sm")]
        )
    """
    container_content = []
    
    # ÂõæË°®Â§¥ÈÉ®
    header_content = []
    
    # Ê†áÈ¢òÈÉ®ÂàÜ
    title_content = [H3(title, cls="text-lg font-semibold")]
    if subtitle:
        title_content.append(P(subtitle, cls="text-sm text-gray-600"))
    
    header_content.append(Div(*title_content))
    
    # Êìç‰ΩúÊåâÈíÆ
    if actions:
        header_content.append(Div(*actions, cls="flex gap-2"))
    
    if len(header_content) > 1:
        container_content.append(
            Div(*header_content, cls="flex justify-between items-start mb-4")
        )
    else:
        container_content.append(
            Div(header_content[0], cls="mb-4")
        )
    
    # ÂõæË°®ÂÜÖÂÆπ
    container_content.append(chart_content)
    
    default_cls = "bg-white p-6 rounded-lg shadow border"
    cls = kwargs.pop('cls', default_cls)
    
    return Div(*container_content, cls=cls, **kwargs)


def metric_grid(metrics: List[Dict[str, Any]], columns: int = 3, **kwargs) -> Div:
    """
    ÂàõÂª∫ÊåáÊ†áÁΩëÊ†ºÂ∏ÉÂ±Ä
    
    Args:
        metrics (List[Dict]): ÊåáÊ†áÊï∞ÊçÆÂàóË°®
        columns (int): ÁΩëÊ†ºÂàóÊï∞
        **kwargs: ÂÖ∂‰ªñHTMLÂ±ûÊÄß
        
    Returns:
        Div: ÊåáÊ†áÁΩëÊ†ºÂÆπÂô®
        
    Example:
        grid = metric_grid([
            {"title": "ÊÄªÁî®Êà∑", "value": "1,234", "change": "‚Üë 12%"},
            {"title": "Ê¥ªË∑ÉÁî®Êà∑", "value": "856", "change": "‚Üë 8%"},
            {"title": "Êñ∞Â¢ûÁî®Êà∑", "value": "89", "change": "‚Üì 3%"}
        ], columns=3)
    """
    grid_cards = []
    
    for metric in metrics:
        card = stats_card(
            title=metric.get('title', ''),
            value=metric.get('value', '0'),
            change=metric.get('change'),
            change_class=metric.get('change_class', 'text-success'),
            icon=metric.get('icon')
        )
        grid_cards.append(card)
    
    # ÁîüÊàêÂìçÂ∫îÂºèÁΩëÊ†ºÁ±ª
    grid_classes = {
        1: "grid grid-cols-1 gap-4",
        2: "grid grid-cols-1 md:grid-cols-2 gap-4", 
        3: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4",
        4: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4",
        5: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4",
        6: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4"
    }
    
    grid_cls = grid_classes.get(columns, "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4")
    container_cls = kwargs.pop('cls', grid_cls)
    
    return Div(*grid_cards, cls=container_cls, **kwargs)


def simple_chart(
    chart_type: str,
    data: List[Dict[str, Any]],
    width: str = "100%",
    height: str = "300px",
    **kwargs
) -> Div:
    """
    ÂàõÂª∫ÁÆÄÂçïÂõæË°®Ôºà‰ΩøÁî®CanvasÊàñSVGÔºâ
    
    Args:
        chart_type (str): ÂõæË°®Á±ªÂûã (bar, line, pie)
        data (List[Dict]): ÂõæË°®Êï∞ÊçÆ
        width (str): ÂõæË°®ÂÆΩÂ∫¶
        height (str): ÂõæË°®È´òÂ∫¶
        **kwargs: ÂÖ∂‰ªñHTMLÂ±ûÊÄß
        
    Returns:
        Div: ÂõæË°®ÂÆπÂô®
        
    Example:
        chart = simple_chart("bar", [
            {"label": "‰∏ÄÊúà", "value": 100},
            {"label": "‰∫åÊúà", "value": 150},
            {"label": "‰∏âÊúà", "value": 120}
        ])
    """
    chart_id = kwargs.pop('id', f"chart-{id(data)}")
    
    # ÂàõÂª∫canvasÂÖÉÁ¥†
    canvas = Canvas(
        width=width.replace('%', '').replace('px', '') if width != "100%" else "400",
        height=height.replace('px', ''),
        id=chart_id,
        style=f"width: {width}; height: {height}; border: 1px solid #e5e7eb; border-radius: 0.5rem;"
    )
    
    # ÁîüÊàêÂõæË°®ËÑöÊú¨
    chart_script = Script(f"""
        document.addEventListener('DOMContentLoaded', function() {{
            const canvas = document.getElementById('{chart_id}');
            const ctx = canvas.getContext('2d');
            const data = {data};
            const chartType = '{chart_type}';
            
            // ÁÆÄÂçïÁöÑÂõæË°®ÁªòÂà∂ÈÄªËæë
            function drawChart() {{
                const width = canvas.width;
                const height = canvas.height;
                const padding = 40;
                
                // Ê∏ÖÁ©∫ÁîªÂ∏É
                ctx.clearRect(0, 0, width, height);
                
                if (chartType === 'bar') {{
                    drawBarChart(ctx, data, width, height, padding);
                }} else if (chartType === 'line') {{
                    drawLineChart(ctx, data, width, height, padding);
                }} else if (chartType === 'pie') {{
                    drawPieChart(ctx, data, width, height);
                }}
            }}
            
            function drawBarChart(ctx, data, width, height, padding) {{
                const barWidth = (width - padding * 2) / data.length - 10;
                const maxValue = Math.max(...data.map(d => d.value));
                
                data.forEach((item, index) => {{
                    const barHeight = (item.value / maxValue) * (height - padding * 2);
                    const x = padding + index * (barWidth + 10);
                    const y = height - padding - barHeight;
                    
                    // ÁªòÂà∂Êü±Â≠ê
                    ctx.fillStyle = '#3b82f6';
                    ctx.fillRect(x, y, barWidth, barHeight);
                    
                    // ÁªòÂà∂Ê†áÁ≠æ
                    ctx.fillStyle = '#374151';
                    ctx.font = '12px sans-serif';
                    ctx.textAlign = 'center';
                    ctx.fillText(item.label, x + barWidth / 2, height - 10);
                    ctx.fillText(item.value, x + barWidth / 2, y - 5);
                }});
            }}
            
            function drawLineChart(ctx, data, width, height, padding) {{
                const stepX = (width - padding * 2) / (data.length - 1);
                const maxValue = Math.max(...data.map(d => d.value));
                
                ctx.beginPath();
                ctx.strokeStyle = '#3b82f6';
                ctx.lineWidth = 2;
                
                data.forEach((item, index) => {{
                    const x = padding + index * stepX;
                    const y = height - padding - (item.value / maxValue) * (height - padding * 2);
                    
                    if (index === 0) {{
                        ctx.moveTo(x, y);
                    }} else {{
                        ctx.lineTo(x, y);
                    }}
                    
                    // ÁªòÂà∂Êï∞ÊçÆÁÇπ
                    ctx.fillStyle = '#3b82f6';
                    ctx.beginPath();
                    ctx.arc(x, y, 3, 0, 2 * Math.PI);
                    ctx.fill();
                }});
                
                ctx.stroke();
            }}
            
            function drawPieChart(ctx, data, width, height) {{
                const centerX = width / 2;
                const centerY = height / 2;
                const radius = Math.min(width, height) / 2 - 20;
                const total = data.reduce((sum, item) => sum + item.value, 0);
                
                let currentAngle = 0;
                const colors = ['#3b82f6', '#ef4444', '#10b981', '#f59e0b', '#8b5cf6'];
                
                data.forEach((item, index) => {{
                    const sliceAngle = (item.value / total) * 2 * Math.PI;
                    
                    ctx.beginPath();
                    ctx.arc(centerX, centerY, radius, currentAngle, currentAngle + sliceAngle);
                    ctx.lineTo(centerX, centerY);
                    ctx.fillStyle = colors[index % colors.length];
                    ctx.fill();
                    
                    currentAngle += sliceAngle;
                }});
            }}
            
            drawChart();
        }});
    """)
    
    container_cls = kwargs.pop('cls', 'chart-container')
    
    return Div(
        canvas,
        chart_script,
        cls=container_cls,
        **kwargs
    )


def status_indicator(
    status: str,
    color_map: Optional[Dict[str, str]] = None,
    **kwargs
) -> Span:
    """
    ÂàõÂª∫Áä∂ÊÄÅÊåáÁ§∫Âô®
    
    Args:
        status (str): Áä∂ÊÄÅÊñáÊú¨
        color_map (Dict, optional): Áä∂ÊÄÅÈ¢úËâ≤Êò†Â∞Ñ
        **kwargs: ÂÖ∂‰ªñHTMLÂ±ûÊÄß
        
    Returns:
        Span: Áä∂ÊÄÅÊåáÁ§∫Âô®
        
    Example:
        indicator = status_indicator("Ê≠£Â∏∏", {
            "Ê≠£Â∏∏": "badge-success",
            "ÂºÇÂ∏∏": "badge-error"
        })
    """
    if color_map is None:
        color_map = {
            "Ê≠£Â∏∏": "badge-success",
            "ÂºÇÂ∏∏": "badge-error", 
            "Ë≠¶Âëä": "badge-warning",
            "ÂæÖÂ§ÑÁêÜ": "badge-info",
            "Â∑≤ÂÆåÊàê": "badge-success",
            "ËøõË°å‰∏≠": "badge-warning",
            "Â∑≤ÂèñÊ∂à": "badge-error"
        }
    
    badge_class = color_map.get(status, "badge-ghost")
    default_cls = f"badge {badge_class}"
    cls = kwargs.pop('cls', default_cls)
    
    return Span(status, cls=cls, **kwargs)


# ÂêëÂêéÂÖºÂÆπÁöÑÂØºÂá∫
__all__ = [
    'stats_card',
    'progress_bar',
    'chart_container',
    'metric_grid',
    'simple_chart',
    'status_indicator'
]