# -*- coding: utf-8 -*-
"""
订单管理路由 V2.0
增强版订单管理系统，支持完整的V2.0业务流程
"""

import logging
from typing import Any, Dict, List, Optional
from starlette.routing import Route
from starlette.responses import RedirectResponse, Response, StreamingResponse, HTMLResponse
from starlette.exceptions import HTTPException
from starlette.requests import Request
from datetime import datetime, timedelta
import csv
import io
import json

# 导入项目模块
from database.db_orders import OrderManager
from database.db_merchants import merchant_manager
from database.db_users import user_manager
from web.layout import create_layout, require_auth, okx_form_group, okx_input, okx_button, okx_textarea, okx_select
from utils.enums import ORDER_STATUS
from fasthtml.common import *

logger = logging.getLogger(__name__)

# V2.0 订单状态映射和颜色
ORDER_STATUS_COLORS = {
    ORDER_STATUS.ATTEMPT_BOOKING.value: "warning",
    ORDER_STATUS.COMPLETED.value: "success", 
    ORDER_STATUS.REVIEWED.value: "info",
    ORDER_STATUS.MUTUAL_REVIEW.value: "primary",
    ORDER_STATUS.SINGLE_REVIEW.value: "secondary"
}

ORDER_STATUS_ICONS = {
    ORDER_STATUS.ATTEMPT_BOOKING.value: "⏳",
    ORDER_STATUS.COMPLETED.value: "✅",
    ORDER_STATUS.REVIEWED.value: "⭐", 
    ORDER_STATUS.MUTUAL_REVIEW.value: "🤝",
    ORDER_STATUS.SINGLE_REVIEW.value: "📝"
}

@require_auth
async def orders_dashboard(request: Request) -> Response:
    """订单管理仪表板 - V2.0增强版"""
    
    # 获取筛选参数
    status_filter = request.query_params.get("status", "")
    merchant_filter = request.query_params.get("merchant", "") 
    user_filter = request.query_params.get("user", "")
    date_from = request.query_params.get("date_from", "")
    date_to = request.query_params.get("date_to", "")
    page = int(request.query_params.get("page", "1"))
    per_page = int(request.query_params.get("per_page", "20"))
    
    try:
        # 构建查询参数
        query_params = {
            'status': status_filter if status_filter else None,
            'merchant_id': int(merchant_filter) if merchant_filter.isdigit() else None,
            'user_id': int(user_filter) if user_filter.isdigit() else None,
            'date_from': date_from if date_from else None,
            'date_to': date_to if date_to else None,
            'limit': per_page,
            'offset': (page - 1) * per_page
        }
        
        # 获取订单数据
        order_manager = OrderManager()
        orders = await order_manager.get_orders(**query_params)
        
        # 获取总数用于分页
        total_orders = await order_manager.count_orders(
            status=query_params['status'],
            merchant_id=query_params['merchant_id'],
            user_id=query_params['user_id'],
            date_from=query_params['date_from'],
            date_to=query_params['date_to']
        )
        
        # 获取统计数据
        stats = await _get_order_statistics()
        
        # 获取商户列表用于筛选
        merchants = await merchant_manager.get_merchants(limit=100)
        
    except Exception as e:
        logger.error(f"获取订单数据失败: {e}")
        raise HTTPException(status_code=500, detail="无法获取订单数据")
    
    # 统计卡片
    stats_cards = Div(
        # 今日订单
        Div(
            Div(
                Span("📊", cls="text-3xl"),
                Div(
                    P("今日订单", cls="text-sm text-gray-500"),
                    P(str(stats['today_orders']), cls="text-2xl font-bold text-primary")
                ),
                cls="flex items-center gap-3"
            ),
            cls="stat-card"
        ),
        
        # 本周收入
        Div(
            Div(
                Span("💰", cls="text-3xl"),
                Div(
                    P("本周收入", cls="text-sm text-gray-500"),
                    P(f"¥{stats['week_revenue']:,.0f}", cls="text-2xl font-bold text-success")
                ),
                cls="flex items-center gap-3"
            ),
            cls="stat-card"
        ),
        
        # 完成率
        Div(
            Div(
                Span("📈", cls="text-3xl"), 
                Div(
                    P("完成率", cls="text-sm text-gray-500"),
                    P(f"{stats['completion_rate']:.1f}%", cls="text-2xl font-bold text-info")
                ),
                cls="flex items-center gap-3"
            ),
            cls="stat-card"
        ),
        
        # 活跃用户
        Div(
            Div(
                Span("👥", cls="text-3xl"),
                Div(
                    P("活跃用户", cls="text-sm text-gray-500"),
                    P(str(stats['active_users']), cls="text-2xl font-bold text-warning")
                ),
                cls="flex items-center gap-3"
            ),
            cls="stat-card"
        ),
        
        cls="stats-container"
    )
    
    # 高级搜索和筛选表单
    filter_form = Form(
        Div(
            # 第一行筛选器
            Div(
                Div(
                    Label("订单状态", cls="label-text text-sm font-medium"),
                    okx_select("status", [
                        ('', '所有状态'),
                        (ORDER_STATUS.ATTEMPT_BOOKING.value, f"{ORDER_STATUS_ICONS[ORDER_STATUS.ATTEMPT_BOOKING.value]} {ORDER_STATUS.ATTEMPT_BOOKING.value}"),
                        (ORDER_STATUS.COMPLETED.value, f"{ORDER_STATUS_ICONS[ORDER_STATUS.COMPLETED.value]} {ORDER_STATUS.COMPLETED.value}"),
                        (ORDER_STATUS.REVIEWED.value, f"{ORDER_STATUS_ICONS[ORDER_STATUS.REVIEWED.value]} {ORDER_STATUS.REVIEWED.value}"),
                        (ORDER_STATUS.MUTUAL_REVIEW.value, f"{ORDER_STATUS_ICONS[ORDER_STATUS.MUTUAL_REVIEW.value]} {ORDER_STATUS.MUTUAL_REVIEW.value}"),
                        (ORDER_STATUS.SINGLE_REVIEW.value, f"{ORDER_STATUS_ICONS[ORDER_STATUS.SINGLE_REVIEW.value]} {ORDER_STATUS.SINGLE_REVIEW.value}")
                    ], selected=status_filter, cls="select select-bordered w-full"),
                    cls="form-group"
                ),
                
                Div(
                    Label("商户筛选", cls="label-text text-sm font-medium"),
                    okx_select("merchant", [('', '所有商户')] + 
                              [(str(m['id']), m['name']) for m in merchants], 
                              selected=merchant_filter, cls="select select-bordered w-full"),
                    cls="form-group"
                ),
                
                Div(
                    Label("用户ID", cls="label-text text-sm font-medium"),
                    okx_input("user", placeholder="输入用户ID", value=user_filter, 
                             cls="input input-bordered w-full"),
                    cls="form-group"
                ),
                
                Div(
                    Label("每页显示", cls="label-text text-sm font-medium"),
                    okx_select("per_page", [
                        ('10', '10条'),
                        ('20', '20条'),
                        ('50', '50条'),
                        ('100', '100条')
                    ], selected=str(per_page), cls="select select-bordered w-full"),
                    cls="form-group"
                ),
                
                cls="content-grid grid-4"
            ),
            
            # 第二行：日期范围
            Div(
                Div(
                    Label("开始日期", cls="label-text text-sm font-medium"),
                    okx_input("date_from", type="date", value=date_from, 
                             cls="input input-bordered w-full"),
                    cls="form-group"
                ),
                
                Div(
                    Label("结束日期", cls="label-text text-sm font-medium"),
                    okx_input("date_to", type="date", value=date_to,
                             cls="input input-bordered w-full"),
                    cls="form-group"
                ),
                
                # 操作按钮
                Div(
                    Label("操作", cls="label-text text-sm font-medium opacity-0"),
                    Div(
                        okx_button("🔍 筛选", type="submit", cls="btn btn-primary"),
                        A("🔄 重置", href="/orders", cls="btn btn-outline"),
                        cls="action-buttons"
                    ),
                    cls="form-group"
                ),
                
                cls="content-grid grid-3"
            ),
            
            cls="filter-container"
        ),
        method="get",
        action="/orders"
    )
    
    # 批量操作工具栏
    batch_toolbar = Div(
        Div(
            H3("批量操作", cls="content-section-title"),
            P("选择订单后可进行批量操作", cls="text-sm text-gray-500"),
        ),
        Div(
            Form(
                Input(type="hidden", name="action", value="batch_complete"),
                okx_button("✅ 批量完成", type="submit", cls="btn btn-success btn-sm", 
                          onclick="return confirmBatchAction('完成')"),
                method="post",
                action="/orders/batch"
            ),
            Form(
                Input(type="hidden", name="action", value="batch_cancel"),
                okx_button("❌ 批量取消", type="submit", cls="btn btn-error btn-sm",
                          onclick="return confirmBatchAction('取消')"),
                method="post", 
                action="/orders/batch"
            ),
            A("📊 导出数据", href="/orders/export" + (f"?{request.url.query}" if request.url.query else ""), 
              cls="btn btn-outline btn-sm"),
            cls="action-buttons"
        ),
        cls="toolbar-container"
    )
    
    # 订单列表表格
    table_rows = []
    for order in orders:
        status_color = ORDER_STATUS_COLORS.get(order['status'], 'secondary')
        status_icon = ORDER_STATUS_ICONS.get(order['status'], '❓')
        
        row = Tr(
            # 选择框
            Td(
                Input(type="checkbox", name="order_ids", value=str(order['id']),
                     cls="checkbox checkbox-primary"),
                cls="w-12"
            ),
            
            # 订单ID
            Td(
                Div(
                    Strong(f"#{order['id']}", cls="font-mono text-sm"),
                    P(order['created_at'][:16], cls="text-xs text-gray-500"),
                    cls="space-y-1"
                ),
                cls="min-w-24"
            ),
            
            # 用户信息
            Td(
                Div(
                    P(order.get('customer_username', f"用户{order['customer_user_id']}"), 
                      cls="font-medium text-sm"),
                    P(f"ID: {order['customer_user_id']}", cls="text-xs text-gray-500"),
                    cls="space-y-1"
                )
            ),
            
            # 商户信息
            Td(
                Div(
                    P(order.get('merchant_name', '未知商户'), cls="font-medium text-sm"),
                    P(f"ID: {order['merchant_id']}", cls="text-xs text-gray-500"),
                    cls="space-y-1"
                )
            ),
            
            # 价格
            Td(
                Strong(f"¥{order['price']}", cls="text-lg text-success"),
                cls="text-right"
            ),
            
            # 状态
            Td(
                Span(
                    f"{status_icon} {order['status']}", 
                    cls=f"badge badge-{status_color} text-xs font-medium"
                )
            ),
            
            # 预约时间
            Td(
                order.get('appointment_time', '未设置')[:16] if order.get('appointment_time') else '-',
                cls="text-sm"
            ),
            
            # 操作
            Td(
                Div(
                    A("👁️", href=f"/orders/{order['id']}/detail", 
                      cls="btn btn-ghost btn-xs", title="查看详情"),
                    _generate_quick_action_button(order),
                    cls="flex gap-1"
                )
            ),
            
            cls="hover:bg-gray-50"
        )
        table_rows.append(row)
    
    # 分页信息
    total_pages = (total_orders + per_page - 1) // per_page
    pagination = _generate_pagination(page, total_pages, request.query_params)
    
    # 表格
    orders_table = Div(
        Table(
            Thead(
                Tr(
                    Th(
                        Input(type="checkbox", cls="checkbox checkbox-primary", 
                              onclick="toggleAllOrders(this)"),
                        cls="w-12"
                    ),
                    Th("订单信息"),
                    Th("用户"),
                    Th("商户"),
                    Th("金额", cls="text-right"),
                    Th("状态"),
                    Th("预约时间"),
                    Th("操作", cls="w-24")
                )
            ),
            Tbody(*table_rows),
            cls="table table-zebra w-full"
        ),
        cls="data-table-container"
    )
    
    # JavaScript代码
    script = Script(f"""
    function toggleAllOrders(source) {{
        const checkboxes = document.querySelectorAll('input[name="order_ids"]');
        checkboxes.forEach(checkbox => checkbox.checked = source.checked);
    }}
    
    function confirmBatchAction(action) {{
        const selected = document.querySelectorAll('input[name="order_ids"]:checked');
        if (selected.length === 0) {{
            alert('请先选择要操作的订单');
            return false;
        }}
        return confirm(`确定要${action}选中的 ${{selected.length}} 个订单吗？`);
    }}
    
    // 实时统计更新 (可选)
    setInterval(async function() {{
        try {{
            const response = await fetch('/orders/stats');
            const stats = await response.json();
            // 更新统计卡片... (实现略)
        }} catch (e) {{
            console.log('统计更新失败:', e);
        }}
    }}, 30000); // 30秒更新一次
    """)
    
    content = Div(
        Div(
            H1("订单管理仪表板", cls="page-title"),
            A("📊 查看分析", href="/orders/analytics", cls="btn btn-outline btn-sm"),
            cls="page-header"
        ),
        
        stats_cards,
        filter_form,
        batch_toolbar,
        orders_table,
        
        # 分页
        Div(
            pagination,
            P(f"显示第 {(page-1)*per_page+1}-{min(page*per_page, total_orders)} 条，共 {total_orders} 条订单",
              cls="text-sm text-gray-500"),
            cls="pagination-container"
        ),
        
        script
    )
    
    return HTMLResponse(str(create_layout("订单管理", content)))

def _generate_quick_action_button(order: Dict[str, Any]) -> Any:
    """根据订单状态生成快速操作按钮"""
    status = order['status']
    
    if status == ORDER_STATUS.ATTEMPT_BOOKING.value:
        return A("✅", href=f"/orders/{order['id']}/complete",
                cls="btn btn-success btn-xs", title="标记完成")
    elif status == ORDER_STATUS.COMPLETED.value:
        return A("⭐", href=f"/orders/{order['id']}/review",
                cls="btn btn-info btn-xs", title="管理评价")
    else:
        return A("✏️", href=f"/orders/{order['id']}/edit",
                cls="btn btn-outline btn-xs", title="编辑订单")

def _generate_pagination(current_page: int, total_pages: int, query_params) -> Any:
    """生成分页导航"""
    if total_pages <= 1:
        return Div()
    
    # 构建查询字符串
    query_dict = dict(query_params)
    if 'page' in query_dict:
        del query_dict['page']
    query_string = "&".join([f"{k}={v}" for k, v in query_dict.items() if v])
    query_prefix = f"?{query_string}&" if query_string else "?"
    
    pages = []
    
    # 上一页
    if current_page > 1:
        pages.append(A("‹ 上一页", href=f"/orders{query_prefix}page={current_page-1}",
                      cls="btn btn-outline btn-sm"))
    
    # 页码
    start_page = max(1, current_page - 2)
    end_page = min(total_pages, current_page + 2)
    
    if start_page > 1:
        pages.append(A("1", href=f"/orders{query_prefix}page=1", cls="btn btn-outline btn-sm"))
        if start_page > 2:
            pages.append(Span("...", cls="px-2"))
    
    for page_num in range(start_page, end_page + 1):
        if page_num == current_page:
            pages.append(Span(str(page_num), cls="btn btn-primary btn-sm"))
        else:
            pages.append(A(str(page_num), href=f"/orders{query_prefix}page={page_num}",
                          cls="btn btn-outline btn-sm"))
    
    if end_page < total_pages:
        if end_page < total_pages - 1:
            pages.append(Span("...", cls="px-2"))
        pages.append(A(str(total_pages), href=f"/orders{query_prefix}page={total_pages}",
                      cls="btn btn-outline btn-sm"))
    
    # 下一页
    if current_page < total_pages:
        pages.append(A("下一页 ›", href=f"/orders{query_prefix}page={current_page+1}",
                      cls="btn btn-outline btn-sm"))
    
    return Div(*pages, cls="join")

async def _get_order_statistics() -> Dict[str, Any]:
    """获取订单统计数据"""
    try:
        order_manager = OrderManager()
        
        # 今日订单数
        today = datetime.now().date()
        today_orders = await order_manager.count_orders(
            date_from=today.isoformat(),
            date_to=(today + timedelta(days=1)).isoformat()
        )
        
        # 本周收入
        week_start = today - timedelta(days=today.weekday())
        week_revenue = await order_manager.get_revenue_stats(
            date_from=week_start.isoformat(),
            date_to=(today + timedelta(days=1)).isoformat()
        )
        
        # 完成率
        total_orders = await order_manager.count_orders()
        completed_orders = await order_manager.count_orders(
            status=ORDER_STATUS.COMPLETED.value
        )
        completion_rate = (completed_orders / total_orders * 100) if total_orders > 0 else 0
        
        # 活跃用户数 (本周)
        active_users = await order_manager.count_active_users(
            date_from=week_start.isoformat()
        )
        
        return {
            'today_orders': today_orders,
            'week_revenue': week_revenue or 0,
            'completion_rate': completion_rate,
            'active_users': active_users
        }
        
    except Exception as e:
        logger.error(f"获取统计数据失败: {e}")
        return {
            'today_orders': 0,
            'week_revenue': 0,
            'completion_rate': 0,
            'active_users': 0
        }

@require_auth
async def order_detail_v2(request: Request) -> Response:
    """订单详情页面 V2.0"""
    order_id = request.path_params['id']
    
    try:
        order_manager = OrderManager()
        order = await order_manager.get_order_by_id(int(order_id))
        if not order:
            raise HTTPException(status_code=404, detail="订单不存在")
            
        # 获取用户信息
        user_info = await user_manager.get_user_profile(order['customer_user_id'])
        
        # 获取商户信息
        merchant_info = await merchant_manager.get_merchant(order['merchant_id'])
        
    except Exception as e:
        logger.error(f"获取订单详情失败: {e}")
        raise HTTPException(status_code=500, detail="无法获取订单详情")

    # 订单信息卡片
    order_info_card = Div(
        Div(
            H3("📋 订单信息", cls="content-section-title"),
            Div(
                Div(f"订单ID: #{order['id']}", cls="font-mono text-lg"),
                Div(f"状态: {ORDER_STATUS_ICONS.get(order['status'], '❓')} {order['status']}", 
                    cls=f"badge badge-{ORDER_STATUS_COLORS.get(order['status'], 'secondary')} badge-lg"),
                Div(f"金额: ¥{order['price']}", cls="text-2xl font-bold text-success"),
                Div(f"创建时间: {order['created_at']}", cls="text-sm text-gray-500"),
                cls="space-y-3"
            ),
            cls="content-section"
        )
    )
    
    # 用户信息卡片
    user_info_card = Div(
        H3("👤 用户信息", cls="content-section-title"),
        Div(
            P(f"用户ID: {order['customer_user_id']}", cls="font-mono"),
            P(f"用户名: {order.get('customer_username', '未知')}", cls=""),
            P(f"等级: {user_info.get('level_name', '新手') if user_info else '新手'}", cls=""),
            P(f"历史订单: {user_info.get('order_count', 0) if user_info else 0}次", cls=""),
            cls="space-y-2"
        ),
        cls="content-section"
    )
    
    # 商户信息卡片  
    merchant_info_card = Div(
        H3("🏪 商户信息", cls="content-section-title"),
        Div(
            P(f"商户: {merchant_info.get('name', '未知商户') if merchant_info else '未知商户'}", cls="font-medium"),
            P(f"商户ID: {order['merchant_id']}", cls="font-mono text-sm"),
            P(f"状态: {merchant_info.get('status', '未知') if merchant_info else '未知'}", cls=""),
            A("查看商户详情", href=f"/posts/{order['merchant_id']}", 
              cls="btn btn-outline btn-sm mt-2"),
            cls="space-y-2"
        ),
        cls="content-section"
    )
    
    # 操作历史时间线 (预留)
    timeline_card = Div(
        H3("📅 操作历史", cls="content-section-title"),
        Div("操作历史功能开发中...", cls="text-gray-500 text-center py-8"),
        cls="content-section"
    )
    
    content = Div(
        H1(f"订单详情 - #{order['id']}", cls="page-title"),
        
        Div(
            # 左侧信息区
            Div(
                order_info_card,
                timeline_card,
                cls="space-y-6"
            ),
            
            # 右侧操作区
            Div(
                user_info_card,
                merchant_info_card,
                cls="space-y-6"
            ),
            
            cls="grid grid-cols-1 lg:grid-cols-2 gap-8"
        ),
        
        # 返回按钮
        Div(
            A("← 返回订单列表", href="/orders", cls="btn btn-outline"),
            cls="mt-8"
        )
    )
    
    return HTMLResponse(str(create_layout("订单详情", content)))

@require_auth
async def batch_operations(request: Request) -> Response:
    """批量操作处理"""
    form = await request.form()
    action = form.get('action')
    order_ids = form.getlist('order_ids')
    
    if not order_ids:
        return RedirectResponse(url="/orders?error=no_selection", status_code=302)
    
    try:
        order_manager = OrderManager()
        success_count = 0
        
        for order_id in order_ids:
            if action == 'batch_complete':
                success = await order_manager.update_order_status(
                    int(order_id), ORDER_STATUS.COMPLETED.value)
            elif action == 'batch_cancel':
                success = await order_manager.delete_order(int(order_id))
            else:
                success = False
            
            if success:
                success_count += 1
        
        logger.info(f"批量操作 {action} 完成: {success_count}/{len(order_ids)}")
        return RedirectResponse(
            url=f"/orders?batch_success={success_count}&batch_total={len(order_ids)}", 
            status_code=302)
        
    except Exception as e:
        logger.error(f"批量操作失败: {e}")
        return RedirectResponse(url="/orders?error=batch_failed", status_code=302)

@require_auth
async def export_orders(request: Request) -> Response:
    """导出订单数据为CSV"""
    try:
        # 获取筛选参数
        query_params = {
            'status': request.query_params.get('status') or None,
            'merchant_id': int(request.query_params.get('merchant', 0)) or None,
            'user_id': int(request.query_params.get('user', 0)) or None,
            'date_from': request.query_params.get('date_from') or None,
            'date_to': request.query_params.get('date_to') or None,
            'limit': 10000  # 导出限制
        }
        
        order_manager = OrderManager()
        orders = await order_manager.get_orders(**query_params)
        
        # 创建CSV
        output = io.StringIO()
        writer = csv.writer(output)
        
        # 写入表头
        writer.writerow([
            '订单ID', '用户ID', '用户名', '商户ID', '商户名', 
            '金额', '状态', '预约时间', '完成时间', '创建时间'
        ])
        
        # 写入数据
        for order in orders:
            writer.writerow([
                order['id'],
                order['customer_user_id'], 
                order.get('customer_username', ''),
                order['merchant_id'],
                order.get('merchant_name', ''),
                order['price'],
                order['status'],
                order.get('appointment_time', ''),
                order.get('completion_time', ''),
                order['created_at']
            ])
        
        # 准备响应
        output.seek(0)
        filename = f"orders_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        def generate():
            yield output.getvalue().encode('utf-8-sig')  # BOM for Excel
        
        return StreamingResponse(
            generate(),
            media_type="text/csv",
            headers={"Content-Disposition": f"attachment; filename={filename}"}
        )
        
    except Exception as e:
        logger.error(f"导出订单数据失败: {e}")
        raise HTTPException(status_code=500, detail="导出失败")

@require_auth  
async def order_stats_api(request: Request) -> Response:
    """订单统计API (用于实时更新)"""
    try:
        stats = await _get_order_statistics()
        return Response(
            content=json.dumps(stats),
            media_type="application/json"
        )
    except Exception as e:
        logger.error(f"获取统计数据失败: {e}")
        return Response(
            content=json.dumps({"error": "获取统计数据失败"}),
            status_code=500,
            media_type="application/json"
        )

# 导出路由列表
orders_v2_routes = [
    Route("/", orders_dashboard, methods=["GET"]),
    Route("/{id}/detail", order_detail_v2, methods=["GET"]),
    Route("/batch", batch_operations, methods=["POST"]),
    Route("/export", export_orders, methods=["GET"]),
    Route("/stats", order_stats_api, methods=["GET"]),
]
